import * as arr from '@interactjs/utils/arr';
class DropEvent {
    /**
     * Class of events fired on dropzones during drags with acceptable targets.
     */
    constructor(dropStatus, dragEvent, type) {
        this.propagationStopped = false;
        this.immediatePropagationStopped = false;
        const { element, dropzone } = type === 'dragleave'
            ? dropStatus.prev
            : dropStatus.cur;
        this.type = type;
        this.target = element;
        this.currentTarget = element;
        this.dropzone = dropzone;
        this.dragEvent = dragEvent;
        this.relatedTarget = dragEvent.target;
        this.interaction = dragEvent.interaction;
        this.draggable = dragEvent.interactable;
        this.timeStamp = dragEvent.timeStamp;
    }
    /**
     * If this is a `dropactivate` event, the dropzone element will be
     * deactivated.
     *
     * If this is a `dragmove` or `dragenter`, a `dragleave` will be fired on the
     * dropzone element and more.
     */
    reject() {
        const { dropStatus } = this.interaction;
        if ((this.type !== 'dropactivate') && (!this.dropzone ||
            dropStatus.cur.dropzone !== this.dropzone ||
            dropStatus.cur.element !== this.target)) {
            return;
        }
        dropStatus.prev.dropzone = this.dropzone;
        dropStatus.prev.element = this.target;
        dropStatus.rejected = true;
        dropStatus.events.enter = null;
        this.stopImmediatePropagation();
        if (this.type === 'dropactivate') {
            const activeDrops = dropStatus.activeDrops;
            const index = arr.findIndex(activeDrops, ({ dropzone, element }) => dropzone === this.dropzone && element === this.target);
            dropStatus.activeDrops = [
                ...activeDrops.slice(0, index),
                ...activeDrops.slice(index + 1),
            ];
            const deactivateEvent = new DropEvent(dropStatus, this.dragEvent, 'dropdeactivate');
            deactivateEvent.dropzone = this.dropzone;
            deactivateEvent.target = this.target;
            this.dropzone.fire(deactivateEvent);
        }
        else {
            this.dropzone.fire(new DropEvent(dropStatus, this.dragEvent, 'dragleave'));
        }
    }
    preventDefault() { }
    stopPropagation() {
        this.propagationStopped = true;
    }
    stopImmediatePropagation() {
        this.immediatePropagationStopped = this.propagationStopped = true;
    }
}
export default DropEvent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRHJvcEV2ZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiRHJvcEV2ZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUlBLE9BQU8sS0FBSyxHQUFHLE1BQU0sdUJBQXVCLENBQUE7QUFFNUMsTUFBTSxTQUFTO0lBYWI7O09BRUc7SUFDSCxZQUFhLFVBQVUsRUFBRSxTQUFTLEVBQUUsSUFBSTtRQU54Qyx1QkFBa0IsR0FBRyxLQUFLLENBQUE7UUFDMUIsZ0NBQTJCLEdBQUcsS0FBSyxDQUFBO1FBTWpDLE1BQU0sRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLEdBQUcsSUFBSSxLQUFLLFdBQVc7WUFDaEQsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxJQUFJO1lBQ2pCLENBQUMsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFBO1FBRWxCLElBQUksQ0FBQyxJQUFJLEdBQVksSUFBSSxDQUFBO1FBQ3pCLElBQUksQ0FBQyxNQUFNLEdBQVUsT0FBTyxDQUFBO1FBQzVCLElBQUksQ0FBQyxhQUFhLEdBQUcsT0FBTyxDQUFBO1FBQzVCLElBQUksQ0FBQyxRQUFRLEdBQVEsUUFBUSxDQUFBO1FBQzdCLElBQUksQ0FBQyxTQUFTLEdBQU8sU0FBUyxDQUFBO1FBQzlCLElBQUksQ0FBQyxhQUFhLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQTtRQUNyQyxJQUFJLENBQUMsV0FBVyxHQUFLLFNBQVMsQ0FBQyxXQUFXLENBQUE7UUFDMUMsSUFBSSxDQUFDLFNBQVMsR0FBTyxTQUFTLENBQUMsWUFBWSxDQUFBO1FBQzNDLElBQUksQ0FBQyxTQUFTLEdBQU8sU0FBUyxDQUFDLFNBQVMsQ0FBQTtJQUMxQyxDQUFDO0lBRUQ7Ozs7OztPQU1HO0lBQ0gsTUFBTTtRQUNKLE1BQU0sRUFBRSxVQUFVLEVBQUUsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFBO1FBRXZDLElBQ0UsQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLGNBQWMsQ0FBQyxJQUFJLENBQ2hDLENBQUMsSUFBSSxDQUFDLFFBQVE7WUFDZCxVQUFVLENBQUMsR0FBRyxDQUFDLFFBQVEsS0FBSyxJQUFJLENBQUMsUUFBUTtZQUN6QyxVQUFVLENBQUMsR0FBRyxDQUFDLE9BQU8sS0FBSyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDM0MsT0FBTTtTQUNQO1FBRUQsVUFBVSxDQUFDLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQTtRQUN4QyxVQUFVLENBQUMsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFBO1FBRXJDLFVBQVUsQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFBO1FBQzFCLFVBQVUsQ0FBQyxNQUFNLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQTtRQUU5QixJQUFJLENBQUMsd0JBQXdCLEVBQUUsQ0FBQTtRQUUvQixJQUFJLElBQUksQ0FBQyxJQUFJLEtBQUssY0FBYyxFQUFFO1lBQ2hDLE1BQU0sV0FBVyxHQUFHLFVBQVUsQ0FBQyxXQUFXLENBQUE7WUFDMUMsTUFBTSxLQUFLLEdBQUcsR0FBRyxDQUFDLFNBQVMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFFLENBQ2pFLFFBQVEsS0FBSyxJQUFJLENBQUMsUUFBUSxJQUFJLE9BQU8sS0FBSyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUE7WUFFeEQsVUFBVSxDQUFDLFdBQVcsR0FBRztnQkFDdkIsR0FBRyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUM7Z0JBQzlCLEdBQUcsV0FBVyxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO2FBQ2hDLENBQUE7WUFFRCxNQUFNLGVBQWUsR0FBRyxJQUFJLFNBQVMsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLFNBQVMsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFBO1lBRW5GLGVBQWUsQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQTtZQUN4QyxlQUFlLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUE7WUFFcEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUE7U0FDcEM7YUFDSTtZQUNILElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksU0FBUyxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsU0FBUyxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUE7U0FDM0U7SUFDSCxDQUFDO0lBRUQsY0FBYyxLQUFLLENBQUM7SUFFcEIsZUFBZTtRQUNiLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxJQUFJLENBQUE7SUFDaEMsQ0FBQztJQUVELHdCQUF3QjtRQUN0QixJQUFJLENBQUMsMkJBQTJCLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixHQUFHLElBQUksQ0FBQTtJQUNuRSxDQUFDO0NBQ0Y7QUFFRCxlQUFlLFNBQVMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBJbnRlcmFjdGFibGUgZnJvbSAnQGludGVyYWN0anMvY29yZS9JbnRlcmFjdGFibGUnXG5pbXBvcnQgSW50ZXJhY3RFdmVudCBmcm9tICdAaW50ZXJhY3Rqcy9jb3JlL0ludGVyYWN0RXZlbnQnXG5pbXBvcnQgSW50ZXJhY3Rpb24gZnJvbSAnQGludGVyYWN0anMvY29yZS9JbnRlcmFjdGlvbidcbmltcG9ydCB7IEFjdGlvbk5hbWUgfSBmcm9tICdAaW50ZXJhY3Rqcy9jb3JlL3Njb3BlJ1xuaW1wb3J0ICogYXMgYXJyIGZyb20gJ0BpbnRlcmFjdGpzL3V0aWxzL2FycidcblxuY2xhc3MgRHJvcEV2ZW50IHtcbiAgdHlwZTogc3RyaW5nXG4gIHRhcmdldDogRWxlbWVudFxuICBjdXJyZW50VGFyZ2V0OiBFbGVtZW50XG4gIGRyb3B6b25lOiBJbnRlcmFjdGFibGVcbiAgZHJhZ0V2ZW50OiBJbnRlcmFjdEV2ZW50PEFjdGlvbk5hbWUuRHJhZz5cbiAgcmVsYXRlZFRhcmdldDogRWxlbWVudFxuICBpbnRlcmFjdGlvbjogSW50ZXJhY3Rpb25cbiAgZHJhZ2dhYmxlOiBJbnRlcmFjdGFibGVcbiAgdGltZVN0YW1wOiBudW1iZXJcbiAgcHJvcGFnYXRpb25TdG9wcGVkID0gZmFsc2VcbiAgaW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkID0gZmFsc2VcblxuICAvKipcbiAgICogQ2xhc3Mgb2YgZXZlbnRzIGZpcmVkIG9uIGRyb3B6b25lcyBkdXJpbmcgZHJhZ3Mgd2l0aCBhY2NlcHRhYmxlIHRhcmdldHMuXG4gICAqL1xuICBjb25zdHJ1Y3RvciAoZHJvcFN0YXR1cywgZHJhZ0V2ZW50LCB0eXBlKSB7XG4gICAgY29uc3QgeyBlbGVtZW50LCBkcm9wem9uZSB9ID0gdHlwZSA9PT0gJ2RyYWdsZWF2ZSdcbiAgICAgID8gZHJvcFN0YXR1cy5wcmV2XG4gICAgICA6IGRyb3BTdGF0dXMuY3VyXG5cbiAgICB0aGlzLnR5cGUgICAgICAgICAgPSB0eXBlXG4gICAgdGhpcy50YXJnZXQgICAgICAgID0gZWxlbWVudFxuICAgIHRoaXMuY3VycmVudFRhcmdldCA9IGVsZW1lbnRcbiAgICB0aGlzLmRyb3B6b25lICAgICAgPSBkcm9wem9uZVxuICAgIHRoaXMuZHJhZ0V2ZW50ICAgICA9IGRyYWdFdmVudFxuICAgIHRoaXMucmVsYXRlZFRhcmdldCA9IGRyYWdFdmVudC50YXJnZXRcbiAgICB0aGlzLmludGVyYWN0aW9uICAgPSBkcmFnRXZlbnQuaW50ZXJhY3Rpb25cbiAgICB0aGlzLmRyYWdnYWJsZSAgICAgPSBkcmFnRXZlbnQuaW50ZXJhY3RhYmxlXG4gICAgdGhpcy50aW1lU3RhbXAgICAgID0gZHJhZ0V2ZW50LnRpbWVTdGFtcFxuICB9XG5cbiAgLyoqXG4gICAqIElmIHRoaXMgaXMgYSBgZHJvcGFjdGl2YXRlYCBldmVudCwgdGhlIGRyb3B6b25lIGVsZW1lbnQgd2lsbCBiZVxuICAgKiBkZWFjdGl2YXRlZC5cbiAgICpcbiAgICogSWYgdGhpcyBpcyBhIGBkcmFnbW92ZWAgb3IgYGRyYWdlbnRlcmAsIGEgYGRyYWdsZWF2ZWAgd2lsbCBiZSBmaXJlZCBvbiB0aGVcbiAgICogZHJvcHpvbmUgZWxlbWVudCBhbmQgbW9yZS5cbiAgICovXG4gIHJlamVjdCAoKSB7XG4gICAgY29uc3QgeyBkcm9wU3RhdHVzIH0gPSB0aGlzLmludGVyYWN0aW9uXG5cbiAgICBpZiAoXG4gICAgICAodGhpcy50eXBlICE9PSAnZHJvcGFjdGl2YXRlJykgJiYgKFxuICAgICAgICAhdGhpcy5kcm9wem9uZSB8fFxuICAgICAgICBkcm9wU3RhdHVzLmN1ci5kcm9wem9uZSAhPT0gdGhpcy5kcm9wem9uZSB8fFxuICAgICAgICBkcm9wU3RhdHVzLmN1ci5lbGVtZW50ICE9PSB0aGlzLnRhcmdldCkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGRyb3BTdGF0dXMucHJldi5kcm9wem9uZSA9IHRoaXMuZHJvcHpvbmVcbiAgICBkcm9wU3RhdHVzLnByZXYuZWxlbWVudCA9IHRoaXMudGFyZ2V0XG5cbiAgICBkcm9wU3RhdHVzLnJlamVjdGVkID0gdHJ1ZVxuICAgIGRyb3BTdGF0dXMuZXZlbnRzLmVudGVyID0gbnVsbFxuXG4gICAgdGhpcy5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKVxuXG4gICAgaWYgKHRoaXMudHlwZSA9PT0gJ2Ryb3BhY3RpdmF0ZScpIHtcbiAgICAgIGNvbnN0IGFjdGl2ZURyb3BzID0gZHJvcFN0YXR1cy5hY3RpdmVEcm9wc1xuICAgICAgY29uc3QgaW5kZXggPSBhcnIuZmluZEluZGV4KGFjdGl2ZURyb3BzLCAoeyBkcm9wem9uZSwgZWxlbWVudCB9KSA9PlxuICAgICAgICBkcm9wem9uZSA9PT0gdGhpcy5kcm9wem9uZSAmJiBlbGVtZW50ID09PSB0aGlzLnRhcmdldClcblxuICAgICAgZHJvcFN0YXR1cy5hY3RpdmVEcm9wcyA9IFtcbiAgICAgICAgLi4uYWN0aXZlRHJvcHMuc2xpY2UoMCwgaW5kZXgpLFxuICAgICAgICAuLi5hY3RpdmVEcm9wcy5zbGljZShpbmRleCArIDEpLFxuICAgICAgXVxuXG4gICAgICBjb25zdCBkZWFjdGl2YXRlRXZlbnQgPSBuZXcgRHJvcEV2ZW50KGRyb3BTdGF0dXMsIHRoaXMuZHJhZ0V2ZW50LCAnZHJvcGRlYWN0aXZhdGUnKVxuXG4gICAgICBkZWFjdGl2YXRlRXZlbnQuZHJvcHpvbmUgPSB0aGlzLmRyb3B6b25lXG4gICAgICBkZWFjdGl2YXRlRXZlbnQudGFyZ2V0ID0gdGhpcy50YXJnZXRcblxuICAgICAgdGhpcy5kcm9wem9uZS5maXJlKGRlYWN0aXZhdGVFdmVudClcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aGlzLmRyb3B6b25lLmZpcmUobmV3IERyb3BFdmVudChkcm9wU3RhdHVzLCB0aGlzLmRyYWdFdmVudCwgJ2RyYWdsZWF2ZScpKVxuICAgIH1cbiAgfVxuXG4gIHByZXZlbnREZWZhdWx0ICgpIHt9XG5cbiAgc3RvcFByb3BhZ2F0aW9uICgpIHtcbiAgICB0aGlzLnByb3BhZ2F0aW9uU3RvcHBlZCA9IHRydWVcbiAgfVxuXG4gIHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiAoKSB7XG4gICAgdGhpcy5pbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQgPSB0aGlzLnByb3BhZ2F0aW9uU3RvcHBlZCA9IHRydWVcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBEcm9wRXZlbnRcbiJdfQ==