import * as arr from '@interactjs/utils/arr';
class DropEvent {
    /**
     * Class of events fired on dropzones during drags with acceptable targets.
     */
    constructor(dropStatus, dragEvent, type) {
        this.propagationStopped = false;
        this.immediatePropagationStopped = false;
        const { element, dropzone } = type === 'dragleave'
            ? dropStatus.prev
            : dropStatus.cur;
        this.type = type;
        this.target = element;
        this.currentTarget = element;
        this.dropzone = dropzone;
        this.dragEvent = dragEvent;
        this.relatedTarget = dragEvent.target;
        this.interaction = dragEvent.interaction;
        this.draggable = dragEvent.interactable;
        this.timeStamp = dragEvent.timeStamp;
    }
    /**
     * If this is a `dropactivate` event, the dropzone element will be
     * deactivated.
     *
     * If this is a `dragmove` or `dragenter`, a `dragleave` will be fired on the
     * dropzone element and more.
     */
    reject() {
        const { dropStatus } = this.interaction;
        if ((this.type !== 'dropactivate') && (!this.dropzone ||
            dropStatus.cur.dropzone !== this.dropzone ||
            dropStatus.cur.element !== this.target)) {
            return;
        }
        dropStatus.prev.dropzone = this.dropzone;
        dropStatus.prev.element = this.target;
        dropStatus.rejected = true;
        dropStatus.events.enter = null;
        this.stopImmediatePropagation();
        if (this.type === 'dropactivate') {
            const activeDrops = dropStatus.activeDrops;
            const index = arr.findIndex(activeDrops, ({ dropzone, element }) => dropzone === this.dropzone && element === this.target);
            dropStatus.activeDrops = [
                ...activeDrops.slice(0, index),
                ...activeDrops.slice(index + 1),
            ];
            const deactivateEvent = new DropEvent(dropStatus, this.dragEvent, 'dropdeactivate');
            deactivateEvent.dropzone = this.dropzone;
            deactivateEvent.target = this.target;
            this.dropzone.fire(deactivateEvent);
        }
        else {
            this.dropzone.fire(new DropEvent(dropStatus, this.dragEvent, 'dragleave'));
        }
    }
    preventDefault() { }
    stopPropagation() {
        this.propagationStopped = true;
    }
    stopImmediatePropagation() {
        this.immediatePropagationStopped = this.propagationStopped = true;
    }
}
export default DropEvent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRHJvcEV2ZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiRHJvcEV2ZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE9BQU8sS0FBSyxHQUFHLE1BQU0sdUJBQXVCLENBQUE7QUFFNUMsTUFBTSxTQUFTO0lBYWI7O09BRUc7SUFDSCxZQUFhLFVBQVUsRUFBRSxTQUFTLEVBQUUsSUFBSTtRQU54Qyx1QkFBa0IsR0FBRyxLQUFLLENBQUE7UUFDMUIsZ0NBQTJCLEdBQUcsS0FBSyxDQUFBO1FBTWpDLE1BQU0sRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLEdBQUcsSUFBSSxLQUFLLFdBQVc7WUFDaEQsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxJQUFJO1lBQ2pCLENBQUMsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFBO1FBRWxCLElBQUksQ0FBQyxJQUFJLEdBQVksSUFBSSxDQUFBO1FBQ3pCLElBQUksQ0FBQyxNQUFNLEdBQVUsT0FBTyxDQUFBO1FBQzVCLElBQUksQ0FBQyxhQUFhLEdBQUcsT0FBTyxDQUFBO1FBQzVCLElBQUksQ0FBQyxRQUFRLEdBQVEsUUFBUSxDQUFBO1FBQzdCLElBQUksQ0FBQyxTQUFTLEdBQU8sU0FBUyxDQUFBO1FBQzlCLElBQUksQ0FBQyxhQUFhLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQTtRQUNyQyxJQUFJLENBQUMsV0FBVyxHQUFLLFNBQVMsQ0FBQyxXQUFXLENBQUE7UUFDMUMsSUFBSSxDQUFDLFNBQVMsR0FBTyxTQUFTLENBQUMsWUFBWSxDQUFBO1FBQzNDLElBQUksQ0FBQyxTQUFTLEdBQU8sU0FBUyxDQUFDLFNBQVMsQ0FBQTtJQUMxQyxDQUFDO0lBRUQ7Ozs7OztPQU1HO0lBQ0gsTUFBTTtRQUNKLE1BQU0sRUFBRSxVQUFVLEVBQUUsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFBO1FBRXZDLElBQ0UsQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLGNBQWMsQ0FBQyxJQUFJLENBQ2hDLENBQUMsSUFBSSxDQUFDLFFBQVE7WUFDZCxVQUFVLENBQUMsR0FBRyxDQUFDLFFBQVEsS0FBSyxJQUFJLENBQUMsUUFBUTtZQUN6QyxVQUFVLENBQUMsR0FBRyxDQUFDLE9BQU8sS0FBSyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDM0MsT0FBTTtTQUNQO1FBRUQsVUFBVSxDQUFDLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQTtRQUN4QyxVQUFVLENBQUMsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFBO1FBRXJDLFVBQVUsQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFBO1FBQzFCLFVBQVUsQ0FBQyxNQUFNLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQTtRQUU5QixJQUFJLENBQUMsd0JBQXdCLEVBQUUsQ0FBQTtRQUUvQixJQUFJLElBQUksQ0FBQyxJQUFJLEtBQUssY0FBYyxFQUFFO1lBQ2hDLE1BQU0sV0FBVyxHQUFHLFVBQVUsQ0FBQyxXQUFXLENBQUE7WUFDMUMsTUFBTSxLQUFLLEdBQUcsR0FBRyxDQUFDLFNBQVMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFFLENBQ2pFLFFBQVEsS0FBSyxJQUFJLENBQUMsUUFBUSxJQUFJLE9BQU8sS0FBSyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUE7WUFFeEQsVUFBVSxDQUFDLFdBQVcsR0FBRztnQkFDdkIsR0FBRyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUM7Z0JBQzlCLEdBQUcsV0FBVyxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO2FBQ2hDLENBQUE7WUFFRCxNQUFNLGVBQWUsR0FBRyxJQUFJLFNBQVMsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLFNBQVMsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFBO1lBRW5GLGVBQWUsQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQTtZQUN4QyxlQUFlLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUE7WUFFcEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUE7U0FDcEM7YUFDSTtZQUNILElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksU0FBUyxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsU0FBUyxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUE7U0FDM0U7SUFDSCxDQUFDO0lBRUQsY0FBYyxLQUFLLENBQUM7SUFFcEIsZUFBZTtRQUNiLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxJQUFJLENBQUE7SUFDaEMsQ0FBQztJQUVELHdCQUF3QjtRQUN0QixJQUFJLENBQUMsMkJBQTJCLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixHQUFHLElBQUksQ0FBQTtJQUNuRSxDQUFDO0NBQ0Y7QUFFRCxlQUFlLFNBQVMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBJbnRlcmFjdGFibGUgZnJvbSAnQGludGVyYWN0anMvY29yZS9JbnRlcmFjdGFibGUnXG5pbXBvcnQgSW50ZXJhY3RFdmVudCBmcm9tICdAaW50ZXJhY3Rqcy9jb3JlL0ludGVyYWN0RXZlbnQnXG5pbXBvcnQgSW50ZXJhY3Rpb24gZnJvbSAnQGludGVyYWN0anMvY29yZS9JbnRlcmFjdGlvbidcbmltcG9ydCAqIGFzIGFyciBmcm9tICdAaW50ZXJhY3Rqcy91dGlscy9hcnInXG5cbmNsYXNzIERyb3BFdmVudCB7XG4gIHR5cGU6IHN0cmluZ1xuICB0YXJnZXQ6IEVsZW1lbnRcbiAgY3VycmVudFRhcmdldDogRWxlbWVudFxuICBkcm9wem9uZTogSW50ZXJhY3RhYmxlXG4gIGRyYWdFdmVudDogSW50ZXJhY3RFdmVudFxuICByZWxhdGVkVGFyZ2V0OiBFbGVtZW50XG4gIGludGVyYWN0aW9uOiBJbnRlcmFjdGlvblxuICBkcmFnZ2FibGU6IEludGVyYWN0YWJsZVxuICB0aW1lU3RhbXA6IG51bWJlclxuICBwcm9wYWdhdGlvblN0b3BwZWQgPSBmYWxzZVxuICBpbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQgPSBmYWxzZVxuXG4gIC8qKlxuICAgKiBDbGFzcyBvZiBldmVudHMgZmlyZWQgb24gZHJvcHpvbmVzIGR1cmluZyBkcmFncyB3aXRoIGFjY2VwdGFibGUgdGFyZ2V0cy5cbiAgICovXG4gIGNvbnN0cnVjdG9yIChkcm9wU3RhdHVzLCBkcmFnRXZlbnQsIHR5cGUpIHtcbiAgICBjb25zdCB7IGVsZW1lbnQsIGRyb3B6b25lIH0gPSB0eXBlID09PSAnZHJhZ2xlYXZlJ1xuICAgICAgPyBkcm9wU3RhdHVzLnByZXZcbiAgICAgIDogZHJvcFN0YXR1cy5jdXJcblxuICAgIHRoaXMudHlwZSAgICAgICAgICA9IHR5cGVcbiAgICB0aGlzLnRhcmdldCAgICAgICAgPSBlbGVtZW50XG4gICAgdGhpcy5jdXJyZW50VGFyZ2V0ID0gZWxlbWVudFxuICAgIHRoaXMuZHJvcHpvbmUgICAgICA9IGRyb3B6b25lXG4gICAgdGhpcy5kcmFnRXZlbnQgICAgID0gZHJhZ0V2ZW50XG4gICAgdGhpcy5yZWxhdGVkVGFyZ2V0ID0gZHJhZ0V2ZW50LnRhcmdldFxuICAgIHRoaXMuaW50ZXJhY3Rpb24gICA9IGRyYWdFdmVudC5pbnRlcmFjdGlvblxuICAgIHRoaXMuZHJhZ2dhYmxlICAgICA9IGRyYWdFdmVudC5pbnRlcmFjdGFibGVcbiAgICB0aGlzLnRpbWVTdGFtcCAgICAgPSBkcmFnRXZlbnQudGltZVN0YW1wXG4gIH1cblxuICAvKipcbiAgICogSWYgdGhpcyBpcyBhIGBkcm9wYWN0aXZhdGVgIGV2ZW50LCB0aGUgZHJvcHpvbmUgZWxlbWVudCB3aWxsIGJlXG4gICAqIGRlYWN0aXZhdGVkLlxuICAgKlxuICAgKiBJZiB0aGlzIGlzIGEgYGRyYWdtb3ZlYCBvciBgZHJhZ2VudGVyYCwgYSBgZHJhZ2xlYXZlYCB3aWxsIGJlIGZpcmVkIG9uIHRoZVxuICAgKiBkcm9wem9uZSBlbGVtZW50IGFuZCBtb3JlLlxuICAgKi9cbiAgcmVqZWN0ICgpIHtcbiAgICBjb25zdCB7IGRyb3BTdGF0dXMgfSA9IHRoaXMuaW50ZXJhY3Rpb25cblxuICAgIGlmIChcbiAgICAgICh0aGlzLnR5cGUgIT09ICdkcm9wYWN0aXZhdGUnKSAmJiAoXG4gICAgICAgICF0aGlzLmRyb3B6b25lIHx8XG4gICAgICAgIGRyb3BTdGF0dXMuY3VyLmRyb3B6b25lICE9PSB0aGlzLmRyb3B6b25lIHx8XG4gICAgICAgIGRyb3BTdGF0dXMuY3VyLmVsZW1lbnQgIT09IHRoaXMudGFyZ2V0KSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgZHJvcFN0YXR1cy5wcmV2LmRyb3B6b25lID0gdGhpcy5kcm9wem9uZVxuICAgIGRyb3BTdGF0dXMucHJldi5lbGVtZW50ID0gdGhpcy50YXJnZXRcblxuICAgIGRyb3BTdGF0dXMucmVqZWN0ZWQgPSB0cnVlXG4gICAgZHJvcFN0YXR1cy5ldmVudHMuZW50ZXIgPSBudWxsXG5cbiAgICB0aGlzLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpXG5cbiAgICBpZiAodGhpcy50eXBlID09PSAnZHJvcGFjdGl2YXRlJykge1xuICAgICAgY29uc3QgYWN0aXZlRHJvcHMgPSBkcm9wU3RhdHVzLmFjdGl2ZURyb3BzXG4gICAgICBjb25zdCBpbmRleCA9IGFyci5maW5kSW5kZXgoYWN0aXZlRHJvcHMsICh7IGRyb3B6b25lLCBlbGVtZW50IH0pID0+XG4gICAgICAgIGRyb3B6b25lID09PSB0aGlzLmRyb3B6b25lICYmIGVsZW1lbnQgPT09IHRoaXMudGFyZ2V0KVxuXG4gICAgICBkcm9wU3RhdHVzLmFjdGl2ZURyb3BzID0gW1xuICAgICAgICAuLi5hY3RpdmVEcm9wcy5zbGljZSgwLCBpbmRleCksXG4gICAgICAgIC4uLmFjdGl2ZURyb3BzLnNsaWNlKGluZGV4ICsgMSksXG4gICAgICBdXG5cbiAgICAgIGNvbnN0IGRlYWN0aXZhdGVFdmVudCA9IG5ldyBEcm9wRXZlbnQoZHJvcFN0YXR1cywgdGhpcy5kcmFnRXZlbnQsICdkcm9wZGVhY3RpdmF0ZScpXG5cbiAgICAgIGRlYWN0aXZhdGVFdmVudC5kcm9wem9uZSA9IHRoaXMuZHJvcHpvbmVcbiAgICAgIGRlYWN0aXZhdGVFdmVudC50YXJnZXQgPSB0aGlzLnRhcmdldFxuXG4gICAgICB0aGlzLmRyb3B6b25lLmZpcmUoZGVhY3RpdmF0ZUV2ZW50KVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRoaXMuZHJvcHpvbmUuZmlyZShuZXcgRHJvcEV2ZW50KGRyb3BTdGF0dXMsIHRoaXMuZHJhZ0V2ZW50LCAnZHJhZ2xlYXZlJykpXG4gICAgfVxuICB9XG5cbiAgcHJldmVudERlZmF1bHQgKCkge31cblxuICBzdG9wUHJvcGFnYXRpb24gKCkge1xuICAgIHRoaXMucHJvcGFnYXRpb25TdG9wcGVkID0gdHJ1ZVxuICB9XG5cbiAgc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uICgpIHtcbiAgICB0aGlzLmltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCA9IHRoaXMucHJvcGFnYXRpb25TdG9wcGVkID0gdHJ1ZVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IERyb3BFdmVudFxuIl19