import test from '@interactjs/_dev/test/test';
import * as helpers from '@interactjs/core/tests/_helpers';
import pointerUtils from '@interactjs/utils/pointerUtils';
import drag from '../drag';
import drop from '../drop';
test('actions/drop options', (t) => {
    const scope = helpers.mockScope();
    scope.interact = {};
    drop.install(scope);
    const interactable = scope.interactables.new({ pointerType: 'test' });
    const funcs = Object.freeze({
        drop() { },
        activate() { },
        deactivate() { },
        dropmove() { },
        dragenter() { },
        dragleave() { },
    });
    interactable.dropzone({
        listeners: [funcs],
    });
    t.equal(interactable.events.types.drop[0], funcs.drop);
    t.equal(interactable.events.types.dropactivate[0], funcs.activate);
    t.equal(interactable.events.types.dropdeactivate[0], funcs.deactivate);
    t.equal(interactable.events.types.dropmove[0], funcs.dropmove);
    t.equal(interactable.events.types.dragenter[0], funcs.dragenter);
    t.equal(interactable.events.types.dragleave[0], funcs.dragleave);
    t.end();
});
test('actions/drop start', (t) => {
    const scope = helpers.mockScope();
    scope.interact = {};
    drag.install(scope);
    drop.install(scope);
    let interaction;
    const draggable = scope.interactables.new(scope.document.body).draggable({});
    const event = pointerUtils.coordsToEvent(pointerUtils.newCoords());
    t.doesNotThrow(() => {
        scope.interact.dynamicDrop(false);
        interaction = scope.interactions.new({});
        interaction.pointerDown(event, event, scope.document.body);
        interaction.start({ name: 'drag' }, draggable, scope.document.documentElement);
        interaction.move();
        interaction.end();
    }, 'no error with dynamicDrop === false');
    t.doesNotThrow(() => {
        interaction = scope.interactions.new({});
        scope.interact.dynamicDrop(true);
        interaction.pointerDown(event, event, scope.document.body);
        interaction.start({ name: 'drag' }, draggable, scope.document.documentElement);
        interaction.move();
        interaction.end();
    }, 'no error with dynamicDrop === true');
    t.end();
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJvcC5zcGVjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZHJvcC5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sSUFBSSxNQUFNLDRCQUE0QixDQUFBO0FBQzdDLE9BQU8sS0FBSyxPQUFPLE1BQU0saUNBQWlDLENBQUE7QUFDMUQsT0FBTyxZQUFZLE1BQU0sZ0NBQWdDLENBQUE7QUFDekQsT0FBTyxJQUFJLE1BQU0sU0FBUyxDQUFBO0FBQzFCLE9BQU8sSUFBSSxNQUFNLFNBQVMsQ0FBQTtBQUUxQixJQUFJLENBQUMsc0JBQXNCLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRTtJQUNqQyxNQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsU0FBUyxFQUFFLENBQUE7SUFDakMsS0FBSyxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUE7SUFDbkIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQTtJQUVuQixNQUFNLFlBQVksR0FBRyxLQUFLLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxFQUFFLFdBQVcsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFBO0lBRXJFLE1BQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUM7UUFDMUIsSUFBSSxLQUFLLENBQUM7UUFDVixRQUFRLEtBQUssQ0FBQztRQUNkLFVBQVUsS0FBSyxDQUFDO1FBQ2hCLFFBQVEsS0FBSyxDQUFDO1FBQ2QsU0FBUyxLQUFLLENBQUM7UUFDZixTQUFTLEtBQUssQ0FBQztLQUNoQixDQUFDLENBQUE7SUFFRixZQUFZLENBQUMsUUFBUSxDQUFDO1FBQ3BCLFNBQVMsRUFBRSxDQUFDLEtBQUssQ0FBQztLQUNuQixDQUFDLENBQUE7SUFFRixDQUFDLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDdEQsQ0FBQyxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFBO0lBQ2xFLENBQUMsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQTtJQUN0RSxDQUFDLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUE7SUFDOUQsQ0FBQyxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFBO0lBQ2hFLENBQUMsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQTtJQUVoRSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUE7QUFDVCxDQUFDLENBQUMsQ0FBQTtBQUVGLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFO0lBQy9CLE1BQU0sS0FBSyxHQUFtQixPQUFPLENBQUMsU0FBUyxFQUFFLENBQUE7SUFDakQsS0FBSyxDQUFDLFFBQVEsR0FBRyxFQUFTLENBQUE7SUFDMUIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQTtJQUNuQixJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFBO0lBRW5CLElBQUksV0FBVyxDQUFBO0lBQ2YsTUFBTSxTQUFTLEdBQUcsS0FBSyxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUE7SUFFNUUsTUFBTSxLQUFLLEdBQUcsWUFBWSxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQTtJQUVsRSxDQUFDLENBQUMsWUFBWSxDQUFDLEdBQUcsRUFBRTtRQUNsQixLQUFLLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQTtRQUVqQyxXQUFXLEdBQUcsS0FBSyxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUE7UUFDeEMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUE7UUFDMUQsV0FBVyxDQUFDLEtBQUssQ0FBQyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsRUFBRSxTQUFTLEVBQUUsS0FBSyxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsQ0FBQTtRQUM5RSxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUE7UUFDbEIsV0FBVyxDQUFDLEdBQUcsRUFBRSxDQUFBO0lBQ25CLENBQUMsRUFBRSxxQ0FBcUMsQ0FBQyxDQUFBO0lBRXpDLENBQUMsQ0FBQyxZQUFZLENBQUMsR0FBRyxFQUFFO1FBQ2xCLFdBQVcsR0FBRyxLQUFLLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQTtRQUN4QyxLQUFLLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUNoQyxXQUFXLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUMxRCxXQUFXLENBQUMsS0FBSyxDQUFDLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxFQUFFLFNBQVMsRUFBRSxLQUFLLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxDQUFBO1FBQzlFLFdBQVcsQ0FBQyxJQUFJLEVBQUUsQ0FBQTtRQUNsQixXQUFXLENBQUMsR0FBRyxFQUFFLENBQUE7SUFDbkIsQ0FBQyxFQUFFLG9DQUFvQyxDQUFDLENBQUE7SUFFeEMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFBO0FBQ1QsQ0FBQyxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdGVzdCBmcm9tICdAaW50ZXJhY3Rqcy9fZGV2L3Rlc3QvdGVzdCdcbmltcG9ydCAqIGFzIGhlbHBlcnMgZnJvbSAnQGludGVyYWN0anMvY29yZS90ZXN0cy9faGVscGVycydcbmltcG9ydCBwb2ludGVyVXRpbHMgZnJvbSAnQGludGVyYWN0anMvdXRpbHMvcG9pbnRlclV0aWxzJ1xuaW1wb3J0IGRyYWcgZnJvbSAnLi4vZHJhZydcbmltcG9ydCBkcm9wIGZyb20gJy4uL2Ryb3AnXG5cbnRlc3QoJ2FjdGlvbnMvZHJvcCBvcHRpb25zJywgKHQpID0+IHtcbiAgY29uc3Qgc2NvcGUgPSBoZWxwZXJzLm1vY2tTY29wZSgpXG4gIHNjb3BlLmludGVyYWN0ID0ge31cbiAgZHJvcC5pbnN0YWxsKHNjb3BlKVxuXG4gIGNvbnN0IGludGVyYWN0YWJsZSA9IHNjb3BlLmludGVyYWN0YWJsZXMubmV3KHsgcG9pbnRlclR5cGU6ICd0ZXN0JyB9KVxuXG4gIGNvbnN0IGZ1bmNzID0gT2JqZWN0LmZyZWV6ZSh7XG4gICAgZHJvcCAoKSB7fSxcbiAgICBhY3RpdmF0ZSAoKSB7fSxcbiAgICBkZWFjdGl2YXRlICgpIHt9LFxuICAgIGRyb3Btb3ZlICgpIHt9LFxuICAgIGRyYWdlbnRlciAoKSB7fSxcbiAgICBkcmFnbGVhdmUgKCkge30sXG4gIH0pXG5cbiAgaW50ZXJhY3RhYmxlLmRyb3B6b25lKHtcbiAgICBsaXN0ZW5lcnM6IFtmdW5jc10sXG4gIH0pXG5cbiAgdC5lcXVhbChpbnRlcmFjdGFibGUuZXZlbnRzLnR5cGVzLmRyb3BbMF0sIGZ1bmNzLmRyb3ApXG4gIHQuZXF1YWwoaW50ZXJhY3RhYmxlLmV2ZW50cy50eXBlcy5kcm9wYWN0aXZhdGVbMF0sIGZ1bmNzLmFjdGl2YXRlKVxuICB0LmVxdWFsKGludGVyYWN0YWJsZS5ldmVudHMudHlwZXMuZHJvcGRlYWN0aXZhdGVbMF0sIGZ1bmNzLmRlYWN0aXZhdGUpXG4gIHQuZXF1YWwoaW50ZXJhY3RhYmxlLmV2ZW50cy50eXBlcy5kcm9wbW92ZVswXSwgZnVuY3MuZHJvcG1vdmUpXG4gIHQuZXF1YWwoaW50ZXJhY3RhYmxlLmV2ZW50cy50eXBlcy5kcmFnZW50ZXJbMF0sIGZ1bmNzLmRyYWdlbnRlcilcbiAgdC5lcXVhbChpbnRlcmFjdGFibGUuZXZlbnRzLnR5cGVzLmRyYWdsZWF2ZVswXSwgZnVuY3MuZHJhZ2xlYXZlKVxuXG4gIHQuZW5kKClcbn0pXG5cbnRlc3QoJ2FjdGlvbnMvZHJvcCBzdGFydCcsICh0KSA9PiB7XG4gIGNvbnN0IHNjb3BlOiBJbnRlcmFjdC5TY29wZSA9IGhlbHBlcnMubW9ja1Njb3BlKClcbiAgc2NvcGUuaW50ZXJhY3QgPSB7fSBhcyBhbnlcbiAgZHJhZy5pbnN0YWxsKHNjb3BlKVxuICBkcm9wLmluc3RhbGwoc2NvcGUpXG5cbiAgbGV0IGludGVyYWN0aW9uXG4gIGNvbnN0IGRyYWdnYWJsZSA9IHNjb3BlLmludGVyYWN0YWJsZXMubmV3KHNjb3BlLmRvY3VtZW50LmJvZHkpLmRyYWdnYWJsZSh7fSlcblxuICBjb25zdCBldmVudCA9IHBvaW50ZXJVdGlscy5jb29yZHNUb0V2ZW50KHBvaW50ZXJVdGlscy5uZXdDb29yZHMoKSlcblxuICB0LmRvZXNOb3RUaHJvdygoKSA9PiB7XG4gICAgc2NvcGUuaW50ZXJhY3QuZHluYW1pY0Ryb3AoZmFsc2UpXG5cbiAgICBpbnRlcmFjdGlvbiA9IHNjb3BlLmludGVyYWN0aW9ucy5uZXcoe30pXG4gICAgaW50ZXJhY3Rpb24ucG9pbnRlckRvd24oZXZlbnQsIGV2ZW50LCBzY29wZS5kb2N1bWVudC5ib2R5KVxuICAgIGludGVyYWN0aW9uLnN0YXJ0KHsgbmFtZTogJ2RyYWcnIH0sIGRyYWdnYWJsZSwgc2NvcGUuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KVxuICAgIGludGVyYWN0aW9uLm1vdmUoKVxuICAgIGludGVyYWN0aW9uLmVuZCgpXG4gIH0sICdubyBlcnJvciB3aXRoIGR5bmFtaWNEcm9wID09PSBmYWxzZScpXG5cbiAgdC5kb2VzTm90VGhyb3coKCkgPT4ge1xuICAgIGludGVyYWN0aW9uID0gc2NvcGUuaW50ZXJhY3Rpb25zLm5ldyh7fSlcbiAgICBzY29wZS5pbnRlcmFjdC5keW5hbWljRHJvcCh0cnVlKVxuICAgIGludGVyYWN0aW9uLnBvaW50ZXJEb3duKGV2ZW50LCBldmVudCwgc2NvcGUuZG9jdW1lbnQuYm9keSlcbiAgICBpbnRlcmFjdGlvbi5zdGFydCh7IG5hbWU6ICdkcmFnJyB9LCBkcmFnZ2FibGUsIHNjb3BlLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudClcbiAgICBpbnRlcmFjdGlvbi5tb3ZlKClcbiAgICBpbnRlcmFjdGlvbi5lbmQoKVxuICB9LCAnbm8gZXJyb3Igd2l0aCBkeW5hbWljRHJvcCA9PT0gdHJ1ZScpXG5cbiAgdC5lbmQoKVxufSlcbiJdfQ==