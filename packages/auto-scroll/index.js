import * as domUtils from '@interactjs/utils/domUtils';
import * as is from '@interactjs/utils/is';
import raf from '@interactjs/utils/raf';
import { getStringOptionResult } from '@interactjs/utils/rect';
import { getWindow } from '@interactjs/utils/window';
function install(scope) {
    const { interactions, defaults, actions, } = scope;
    scope.autoScroll = autoScroll;
    interactions.signals.on('new', (interaction) => {
        interaction.autoScroll = null;
    });
    interactions.signals.on('stop', autoScroll.stop);
    interactions.signals.on('action-move', autoScroll.onInteractionMove);
    actions.eventTypes.push('autoscroll');
    defaults.perAction.autoScroll = autoScroll.defaults;
}
const autoScroll = {
    defaults: {
        enabled: false,
        margin: 60,
        // the item that is scrolled (Window or HTMLElement)
        container: null,
        // the scroll speed in pixels per second
        speed: 300,
    },
    interaction: null,
    i: null,
    x: 0,
    y: 0,
    isScrolling: false,
    prevTime: 0,
    margin: 0,
    speed: 0,
    start(interaction) {
        autoScroll.isScrolling = true;
        raf.cancel(autoScroll.i);
        interaction.autoScroll = autoScroll;
        autoScroll.interaction = interaction;
        autoScroll.prevTime = new Date().getTime();
        autoScroll.i = raf.request(autoScroll.scroll);
    },
    stop() {
        autoScroll.isScrolling = false;
        if (autoScroll.interaction) {
            autoScroll.interaction.autoScroll = null;
        }
        raf.cancel(autoScroll.i);
    },
    // scroll the window by the values in scroll.x/y
    scroll() {
        const { interaction } = autoScroll;
        const { target: interactable, element } = interaction;
        const options = interactable.options[autoScroll.interaction.prepared.name].autoScroll;
        const container = getContainer(options.container, interactable, element);
        const now = new Date().getTime();
        // change in time in seconds
        const dt = (now - autoScroll.prevTime) / 1000;
        // displacement
        const s = options.speed * dt;
        if (s >= 1) {
            const scrollBy = {
                x: autoScroll.x * s,
                y: autoScroll.y * s,
            };
            if (scrollBy.x || scrollBy.y) {
                const prevScroll = getScroll(container);
                if (is.window(container)) {
                    container.scrollBy(scrollBy.x, scrollBy.y);
                }
                else if (container) {
                    container.scrollLeft += scrollBy.x;
                    container.scrollTop += scrollBy.y;
                }
                const curScroll = getScroll(container);
                const delta = {
                    x: curScroll.x - prevScroll.x,
                    y: curScroll.y - prevScroll.y,
                };
                if (delta.x || delta.y) {
                    interactable.fire({
                        type: 'autoscroll',
                        target: element,
                        interactable,
                        delta,
                        interaction,
                        container,
                    });
                }
            }
            autoScroll.prevTime = now;
        }
        if (autoScroll.isScrolling) {
            raf.cancel(autoScroll.i);
            autoScroll.i = raf.request(autoScroll.scroll);
        }
    },
    check(interactable, actionName) {
        const options = interactable.options;
        return options[actionName].autoScroll && options[actionName].autoScroll.enabled;
    },
    onInteractionMove({ interaction, pointer }) {
        if (!(interaction.interacting() &&
            autoScroll.check(interaction.target, interaction.prepared.name))) {
            return;
        }
        if (interaction.simulation) {
            autoScroll.x = autoScroll.y = 0;
            return;
        }
        let top;
        let right;
        let bottom;
        let left;
        const { target: interactable, element } = interaction;
        const options = interactable.options[interaction.prepared.name].autoScroll;
        const container = getContainer(options.container, interactable, element);
        if (is.window(container)) {
            left = pointer.clientX < autoScroll.margin;
            top = pointer.clientY < autoScroll.margin;
            right = pointer.clientX > container.innerWidth - autoScroll.margin;
            bottom = pointer.clientY > container.innerHeight - autoScroll.margin;
        }
        else {
            const rect = domUtils.getElementClientRect(container);
            left = pointer.clientX < rect.left + autoScroll.margin;
            top = pointer.clientY < rect.top + autoScroll.margin;
            right = pointer.clientX > rect.right - autoScroll.margin;
            bottom = pointer.clientY > rect.bottom - autoScroll.margin;
        }
        autoScroll.x = (right ? 1 : left ? -1 : 0);
        autoScroll.y = (bottom ? 1 : top ? -1 : 0);
        if (!autoScroll.isScrolling) {
            // set the autoScroll properties to those of the target
            autoScroll.margin = options.margin;
            autoScroll.speed = options.speed;
            autoScroll.start(interaction);
        }
    },
};
export function getContainer(value, interactable, element) {
    return (is.string(value) ? getStringOptionResult(value, interactable, element) : value) || getWindow(element);
}
export function getScroll(container) {
    if (is.window(container)) {
        container = window.document.body;
    }
    return { x: container.scrollLeft, y: container.scrollTop };
}
export function getScrollSize(container) {
    if (is.window(container)) {
        container = window.document.body;
    }
    return { x: container.scrollWidth, y: container.scrollHeight };
}
export function getScrollSizeDelta({ interaction, element }, func) {
    const scrollOptions = interaction && interaction.target.options[interaction.prepared.name].autoScroll;
    if (!scrollOptions || !scrollOptions.enabled) {
        func();
        return { x: 0, y: 0 };
    }
    const scrollContainer = getContainer(scrollOptions.container, interaction.target, element);
    const prevSize = getScroll(scrollContainer);
    func();
    const curSize = getScroll(scrollContainer);
    return {
        x: curSize.x - prevSize.x,
        y: curSize.y - prevSize.y,
    };
}
export default { install };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEtBQUssUUFBUSxNQUFNLDRCQUE0QixDQUFBO0FBQ3RELE9BQU8sS0FBSyxFQUFFLE1BQU0sc0JBQXNCLENBQUE7QUFDMUMsT0FBTyxHQUFHLE1BQU0sdUJBQXVCLENBQUE7QUFDdkMsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sd0JBQXdCLENBQUE7QUFDOUQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLDBCQUEwQixDQUFBO0FBZ0JwRCxTQUFTLE9BQU8sQ0FBRSxLQUFZO0lBQzVCLE1BQU0sRUFDSixZQUFZLEVBQ1osUUFBUSxFQUNSLE9BQU8sR0FDUixHQUFHLEtBQUssQ0FBQTtJQUVULEtBQUssQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFBO0lBRTdCLFlBQVksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLFdBQVcsRUFBRSxFQUFFO1FBQzdDLFdBQVcsQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFBO0lBQy9CLENBQUMsQ0FBQyxDQUFBO0lBRUYsWUFBWSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUVoRCxZQUFZLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsVUFBVSxDQUFDLGlCQUFpQixDQUFDLENBQUE7SUFFcEUsT0FBTyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUE7SUFDckMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDLFFBQVEsQ0FBQTtBQUNyRCxDQUFDO0FBRUQsTUFBTSxVQUFVLEdBQUc7SUFDakIsUUFBUSxFQUFFO1FBQ1IsT0FBTyxFQUFJLEtBQUs7UUFDaEIsTUFBTSxFQUFLLEVBQUU7UUFFYixvREFBb0Q7UUFDcEQsU0FBUyxFQUFF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TyxDQUFDLENBQUMsR0FBRyxRQUFRLENBQUMsQ0FBQztRQUN6QixDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUMsR0FBRyxRQUFRLENBQUMsQ0FBQztLQUMxQixDQUFBO0FBQ0gsQ0FBQztBQUVELGVBQWUsRUFBRSxPQUFPLEVBQUUsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGRvbVV0aWxzIGZyb20gJ0BpbnRlcmFjdGpzL3V0aWxzL2RvbVV0aWxzJ1xuaW1wb3J0ICogYXMgaXMgZnJvbSAnQGludGVyYWN0anMvdXRpbHMvaXMnXG5pbXBvcnQgcmFmIGZyb20gJ0BpbnRlcmFjdGpzL3V0aWxzL3JhZidcbmltcG9ydCB7IGdldFN0cmluZ09wdGlvblJlc3VsdCB9IGZyb20gJ0BpbnRlcmFjdGpzL3V0aWxzL3JlY3QnXG5pbXBvcnQgeyBnZXRXaW5kb3cgfSBmcm9tICdAaW50ZXJhY3Rqcy91dGlscy93aW5kb3cnXG5cbnR5cGUgU2NvcGUgPSBpbXBvcnQgKCdAaW50ZXJhY3Rqcy9jb3JlL3Njb3BlJykuU2NvcGVcblxuZGVjbGFyZSBtb2R1bGUgJ0BpbnRlcmFjdGpzL2NvcmUvc2NvcGUnIHtcbiAgaW50ZXJmYWNlIFNjb3BlIHtcbiAgICBhdXRvU2Nyb2xsOiB0eXBlb2YgYXV0b1Njcm9sbFxuICB9XG59XG5cbmRlY2xhcmUgbW9kdWxlICdAaW50ZXJhY3Rqcy9jb3JlL2RlZmF1bHRPcHRpb25zJyB7XG4gIGludGVyZmFjZSBQZXJBY3Rpb25EZWZhdWx0cyB7XG4gICAgYXV0b1Njcm9sbD86IEludGVyYWN0LkF1dG9TY3JvbGxPcHRpb25cbiAgfVxufVxuXG5mdW5jdGlvbiBpbnN0YWxsIChzY29wZTogU2NvcGUpIHtcbiAgY29uc3Qge1xuICAgIGludGVyYWN0aW9ucyxcbiAgICBkZWZhdWx0cyxcbiAgICBhY3Rpb25zLFxuICB9ID0gc2NvcGVcblxuICBzY29wZS5hdXRvU2Nyb2xsID0gYXV0b1Njcm9sbFxuXG4gIGludGVyYWN0aW9ucy5zaWduYWxzLm9uKCduZXcnLCAoaW50ZXJhY3Rpb24pID0+IHtcbiAgICBpbnRlcmFjdGlvbi5hdXRvU2Nyb2xsID0gbnVsbFxuICB9KVxuXG4gIGludGVyYWN0aW9ucy5zaWduYWxzLm9uKCdzdG9wJywgYXV0b1Njcm9sbC5zdG9wKVxuXG4gIGludGVyYWN0aW9ucy5zaWduYWxzLm9uKCdhY3Rpb24tbW92ZScsIGF1dG9TY3JvbGwub25JbnRlcmFjdGlvbk1vdmUpXG5cbiAgYWN0aW9ucy5ldmVudFR5cGVzLnB1c2goJ2F1dG9zY3JvbGwnKVxuICBkZWZhdWx0cy5wZXJBY3Rpb24uYXV0b1Njcm9sbCA9IGF1dG9TY3JvbGwuZGVmYXVsdHNcbn1cblxuY29uc3QgYXV0b1Njcm9sbCA9IHtcbiAgZGVmYXVsdHM6IHtcbiAgICBlbmFibGVkICA6IGZhbHNlLFxuICAgIG1hcmdpbiAgIDogNjAsXG5cbiAgICAvLyB0aGUgaXRlbSB0aGF0IGlzIHNjcm9sbGVkIChXaW5kb3cgb3IgSFRNTEVsZW1lbnQpXG4gICAgY29udGFpbmVyOiBudWxsIGFzIFdpbmRvdyB8IEVsZW1lbnQsXG5cbiAgICAvLyB0aGUgc2Nyb2xsIHNwZWVkIGluIHBpeGVscyBwZXIgc2Vjb25kXG4gICAgc3BlZWQgICAgOiAzMDAsXG4gIH0gYXMgSW50ZXJhY3QuQXV0b1Njcm9sbE9wdGlvbixcblxuICBpbnRlcmFjdGlvbjogbnVsbCxcbiAgaTogbnVsbCwgICAgLy8gdGhlIGhhbmRsZSByZXR1cm5lZCBieSB3aW5kb3cuc2V0SW50ZXJ2YWxcbiAgeDogMCxcbiAgeTogMCwgLy8gRGlyZWN0aW9uIGVhY2ggcHVsc2UgaXMgdG8gc2Nyb2xsIGluXG5cbiAgaXNTY3JvbGxpbmc6IGZhbHNlLFxuICBwcmV2VGltZTogMCxcbiAgbWFyZ2luOiAwLFxuICBzcGVlZDogMCxcblxuICBzdGFydCAoaW50ZXJhY3Rpb24pIHtcbiAgICBhdXRvU2Nyb2xsLmlzU2Nyb2xsaW5nID0gdHJ1ZVxuICAgIHJhZi5jYW5jZWwoYXV0b1Njcm9sbC5pKVxuXG4gICAgaW50ZXJhY3Rpb24uYXV0b1Njcm9sbCA9IGF1dG9TY3JvbGxcbiAgICBhdXRvU2Nyb2xsLmludGVyYWN0aW9uID0gaW50ZXJhY3Rpb25cbiAgICBhdXRvU2Nyb2xsLnByZXZUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKClcbiAgICBhdXRvU2Nyb2xsLmkgPSByYWYucmVxdWVzdChhdXRvU2Nyb2xsLnNjcm9sbClcbiAgfSxcblxuICBzdG9wICgpIHtcbiAgICBhdXRvU2Nyb2xsLmlzU2Nyb2xsaW5nID0gZmFsc2VcbiAgICBpZiAoYXV0b1Njcm9sbC5pbnRlcmFjdGlvbikge1xuICAgICAgYXV0b1Njcm9sbC5pbnRlcmFjdGlvbi5hdXRvU2Nyb2xsID0gbnVsbFxuICAgIH1cbiAgICByYWYuY2FuY2VsKGF1dG9TY3JvbGwuaSlcbiAgfSxcblxuICAvLyBzY3JvbGwgdGhlIHdpbmRvdyBieSB0aGUgdmFsdWVzIGluIHNjcm9sbC54L3lcbiAgc2Nyb2xsICgpIHtcbiAgICBjb25zdCB7IGludGVyYWN0aW9uIH0gPSBhdXRvU2Nyb2xsXG4gICAgY29uc3QgeyB0YXJnZXQ6IGludGVyYWN0YWJsZSwgZWxlbWVudCB9ID0gaW50ZXJhY3Rpb25cbiAgICBjb25zdCBvcHRpb25zID0gaW50ZXJhY3RhYmxlLm9wdGlvbnNbYXV0b1Njcm9sbC5pbnRlcmFjdGlvbi5wcmVwYXJlZC5uYW1lXS5hdXRvU2Nyb2xsXG4gICAgY29uc3QgY29udGFpbmVyID0gZ2V0Q29udGFpbmVyKG9wdGlvbnMuY29udGFpbmVyLCBpbnRlcmFjdGFibGUsIGVsZW1lbnQpXG4gICAgY29uc3Qgbm93ID0gbmV3IERhdGUoKS5nZXRUaW1lKClcbiAgICAvLyBjaGFuZ2UgaW4gdGltZSBpbiBzZWNvbmRzXG4gICAgY29uc3QgZHQgPSAobm93IC0gYXV0b1Njcm9sbC5wcmV2VGltZSkgLyAxMDAwXG4gICAgLy8gZGlzcGxhY2VtZW50XG4gICAgY29uc3QgcyA9IG9wdGlvbnMuc3BlZWQgKiBkdFxuXG4gICAgaWYgKHMgPj0gMSkge1xuICAgICAgY29uc3Qgc2Nyb2xsQnkgPSB7XG4gICAgICAgIHg6IGF1dG9TY3JvbGwueCAqIHMsXG4gICAgICAgIHk6IGF1dG9TY3JvbGwueSAqIHMsXG4gICAgICB9XG5cbiAgICAgIGlmIChzY3JvbGxCeS54IHx8IHNjcm9sbEJ5LnkpIHtcbiAgICAgICAgY29uc3QgcHJldlNjcm9sbCA9IGdldFNjcm9sbChjb250YWluZXIpXG5cbiAgICAgICAgaWYgKGlzLndpbmRvdyhjb250YWluZXIpKSB7XG4gICAgICAgICAgY29udGFpbmVyLnNjcm9sbEJ5KHNjcm9sbEJ5LngsIHNjcm9sbEJ5LnkpXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoY29udGFpbmVyKSB7XG4gICAgICAgICAgY29udGFpbmVyLnNjcm9sbExlZnQgKz0gc2Nyb2xsQnkueFxuICAgICAgICAgIGNvbnRhaW5lci5zY3JvbGxUb3AgICs9IHNjcm9sbEJ5LnlcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGN1clNjcm9sbCA9IGdldFNjcm9sbChjb250YWluZXIpXG4gICAgICAgIGNvbnN0IGRlbHRhID0ge1xuICAgICAgICAgIHg6IGN1clNjcm9sbC54IC0gcHJldlNjcm9sbC54LFxuICAgICAgICAgIHk6IGN1clNjcm9sbC55IC0gcHJldlNjcm9sbC55LFxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRlbHRhLnggfHwgZGVsdGEueSkge1xuICAgICAgICAgIGludGVyYWN0YWJsZS5maXJlKHtcbiAgICAgICAgICAgIHR5cGU6ICdhdXRvc2Nyb2xsJyxcbiAgICAgICAgICAgIHRhcmdldDogZWxlbWVudCxcbiAgICAgICAgICAgIGludGVyYWN0YWJsZSxcbiAgICAgICAgICAgIGRlbHRhLFxuICAgICAgICAgICAgaW50ZXJhY3Rpb24sXG4gICAgICAgICAgICBjb250YWluZXIsXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBhdXRvU2Nyb2xsLnByZXZUaW1lID0gbm93XG4gICAgfVxuXG4gICAgaWYgKGF1dG9TY3JvbGwuaXNTY3JvbGxpbmcpIHtcbiAgICAgIHJhZi5jYW5jZWwoYXV0b1Njcm9sbC5pKVxuICAgICAgYXV0b1Njcm9sbC5pID0gcmFmLnJlcXVlc3QoYXV0b1Njcm9sbC5zY3JvbGwpXG4gICAgfVxuICB9LFxuICBjaGVjayAoaW50ZXJhY3RhYmxlLCBhY3Rpb25OYW1lKSB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IGludGVyYWN0YWJsZS5vcHRpb25zXG5cbiAgICByZXR1cm4gb3B0aW9uc1thY3Rpb25OYW1lXS5hdXRvU2Nyb2xsICYmIG9wdGlvbnNbYWN0aW9uTmFtZV0uYXV0b1Njcm9sbC5lbmFibGVkXG4gIH0sXG4gIG9uSW50ZXJhY3Rpb25Nb3ZlICh7IGludGVyYWN0aW9uLCBwb2ludGVyIH0pIHtcbiAgICBpZiAoIShpbnRlcmFjdGlvbi5pbnRlcmFjdGluZygpICYmXG4gICAgICAgICAgYXV0b1Njcm9sbC5jaGVjayhpbnRlcmFjdGlvbi50YXJnZXQsIGludGVyYWN0aW9uLnByZXBhcmVkLm5hbWUpKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgaWYgKGludGVyYWN0aW9uLnNpbXVsYXRpb24pIHtcbiAgICAgIGF1dG9TY3JvbGwueCA9IGF1dG9TY3JvbGwueSA9IDBcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGxldCB0b3BcbiAgICBsZXQgcmlnaHRcbiAgICBsZXQgYm90dG9tXG4gICAgbGV0IGxlZnRcblxuICAgIGNvbnN0IHsgdGFyZ2V0OiBpbnRlcmFjdGFibGUsIGVsZW1lbnQgfSA9IGludGVyYWN0aW9uXG4gICAgY29uc3Qgb3B0aW9ucyA9IGludGVyYWN0YWJsZS5vcHRpb25zW2ludGVyYWN0aW9uLnByZXBhcmVkLm5hbWVdLmF1dG9TY3JvbGxcbiAgICBjb25zdCBjb250YWluZXIgPSBnZXRDb250YWluZXIob3B0aW9ucy5jb250YWluZXIsIGludGVyYWN0YWJsZSwgZWxlbWVudClcblxuICAgIGlmIChpcy53aW5kb3coY29udGFpbmVyKSkge1xuICAgICAgbGVmdCAgID0gcG9pbnRlci5jbGllbnRYIDwgYXV0b1Njcm9sbC5tYXJnaW5cbiAgICAgIHRvcCAgICA9IHBvaW50ZXIuY2xpZW50WSA8IGF1dG9TY3JvbGwubWFyZ2luXG4gICAgICByaWdodCAgPSBwb2ludGVyLmNsaWVudFggPiBjb250YWluZXIuaW5uZXJXaWR0aCAgLSBhdXRvU2Nyb2xsLm1hcmdpblxuICAgICAgYm90dG9tID0gcG9pbnRlci5jbGllbnRZID4gY29udGFpbmVyLmlubmVySGVpZ2h0IC0gYXV0b1Njcm9sbC5tYXJnaW5cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBjb25zdCByZWN0ID0gZG9tVXRpbHMuZ2V0RWxlbWVudENsaWVudFJlY3QoY29udGFpbmVyKVxuXG4gICAgICBsZWZ0ICAgPSBwb2ludGVyLmNsaWVudFggPCByZWN0LmxlZnQgICArIGF1dG9TY3JvbGwubWFyZ2luXG4gICAgICB0b3AgICAgPSBwb2ludGVyLmNsaWVudFkgPCByZWN0LnRvcCAgICArIGF1dG9TY3JvbGwubWFyZ2luXG4gICAgICByaWdodCAgPSBwb2ludGVyLmNsaWVudFggPiByZWN0LnJpZ2h0ICAtIGF1dG9TY3JvbGwubWFyZ2luXG4gICAgICBib3R0b20gPSBwb2ludGVyLmNsaWVudFkgPiByZWN0LmJvdHRvbSAtIGF1dG9TY3JvbGwubWFyZ2luXG4gICAgfVxuXG4gICAgYXV0b1Njcm9sbC54ID0gKHJpZ2h0ID8gMSA6IGxlZnQgPyAtMSA6IDApXG4gICAgYXV0b1Njcm9sbC55ID0gKGJvdHRvbSA/IDEgOiAgdG9wID8gLTEgOiAwKVxuXG4gICAgaWYgKCFhdXRvU2Nyb2xsLmlzU2Nyb2xsaW5nKSB7XG4gICAgICAvLyBzZXQgdGhlIGF1dG9TY3JvbGwgcHJvcGVydGllcyB0byB0aG9zZSBvZiB0aGUgdGFyZ2V0XG4gICAgICBhdXRvU2Nyb2xsLm1hcmdpbiA9IG9wdGlvbnMubWFyZ2luXG4gICAgICBhdXRvU2Nyb2xsLnNwZWVkICA9IG9wdGlvbnMuc3BlZWRcblxuICAgICAgYXV0b1Njcm9sbC5zdGFydChpbnRlcmFjdGlvbilcbiAgICB9XG4gIH0sXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRDb250YWluZXIgKHZhbHVlLCBpbnRlcmFjdGFibGUsIGVsZW1lbnQpIHtcbiAgcmV0dXJuIChpcy5zdHJpbmcodmFsdWUpID8gZ2V0U3RyaW5nT3B0aW9uUmVzdWx0KHZhbHVlLCBpbnRlcmFjdGFibGUsIGVsZW1lbnQpIDogdmFsdWUpIHx8IGdldFdpbmRvdyhlbGVtZW50KVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0U2Nyb2xsIChjb250YWluZXIpIHtcbiAgaWYgKGlzLndpbmRvdyhjb250YWluZXIpKSB7IGNvbnRhaW5lciA9IHdpbmRvdy5kb2N1bWVudC5ib2R5IH1cblxuICByZXR1cm4geyB4OiBjb250YWluZXIuc2Nyb2xsTGVmdCwgeTogY29udGFpbmVyLnNjcm9sbFRvcCB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRTY3JvbGxTaXplIChjb250YWluZXIpIHtcbiAgaWYgKGlzLndpbmRvdyhjb250YWluZXIpKSB7IGNvbnRhaW5lciA9IHdpbmRvdy5kb2N1bWVudC5ib2R5IH1cblxuICByZXR1cm4geyB4OiBjb250YWluZXIuc2Nyb2xsV2lkdGgsIHk6IGNvbnRhaW5lci5zY3JvbGxIZWlnaHQgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0U2Nyb2xsU2l6ZURlbHRhICh7IGludGVyYWN0aW9uLCBlbGVtZW50IH0sIGZ1bmMpIHtcbiAgY29uc3Qgc2Nyb2xsT3B0aW9ucyA9IGludGVyYWN0aW9uICYmIGludGVyYWN0aW9uLnRhcmdldC5vcHRpb25zW2ludGVyYWN0aW9uLnByZXBhcmVkLm5hbWVdLmF1dG9TY3JvbGxcblxuICBpZiAoIXNjcm9sbE9wdGlvbnMgfHwgIXNjcm9sbE9wdGlvbnMuZW5hYmxlZCkge1xuICAgIGZ1bmMoKVxuICAgIHJldHVybiB7IHg6IDAsIHk6IDAgfVxuICB9XG5cbiAgY29uc3Qgc2Nyb2xsQ29udGFpbmVyID0gZ2V0Q29udGFpbmVyKFxuICAgIHNjcm9sbE9wdGlvbnMuY29udGFpbmVyLFxuICAgIGludGVyYWN0aW9uLnRhcmdldCxcbiAgICBlbGVtZW50XG4gIClcblxuICBjb25zdCBwcmV2U2l6ZSA9IGdldFNjcm9sbChzY3JvbGxDb250YWluZXIpXG4gIGZ1bmMoKVxuICBjb25zdCBjdXJTaXplID0gZ2V0U2Nyb2xsKHNjcm9sbENvbnRhaW5lcilcblxuICByZXR1cm4ge1xuICAgIHg6IGN1clNpemUueCAtIHByZXZTaXplLngsXG4gICAgeTogY3VyU2l6ZS55IC0gcHJldlNpemUueSxcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCB7IGluc3RhbGwgfVxuIl19