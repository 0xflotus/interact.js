import test from '@interactjs/_dev/test/test';
import * as helpers from '@interactjs/core/tests/helpers';
import Signals from '@interactjs/utils/Signals';
import hold from '../hold';
import { autoStart } from '../index';
test('autoStart/hold', (t) => {
    const scope = helpers.mockScope({
        autoStart: {
            defaults: {
                perAction: {},
            },
            signals: new Signals(),
        },
    });
    const autoStartHold = hold;
    autoStart.install(scope);
    autoStartHold.install(scope);
    t.equal(scope.defaults.perAction.hold, 0, 'sets scope.defaults.perAction.hold');
    t.equal(scope.defaults.perAction.delay, 0, 'backwards compatible "delay" alias.');
    const holdDuration = 1000;
    const actionName = 'TEST_ACTION';
    const interaction = {
        target: { options: { [actionName]: { hold: holdDuration } } },
        prepared: { name: actionName },
    };
    t.equal(autoStartHold.getHoldDuration(interaction), holdDuration, 'gets holdDuration');
    const delayDuration = 500;
    interaction.target.options[actionName].delay = delayDuration;
    delete interaction.target.options[actionName].hold;
    t.equal(autoStartHold.getHoldDuration(interaction), delayDuration, 'gets holdDuration from "delay" value');
    t.end();
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaG9sZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImhvbGQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxJQUFJLE1BQU0sNEJBQTRCLENBQUE7QUFDN0MsT0FBTyxLQUFLLE9BQU8sTUFBTSxnQ0FBZ0MsQ0FBQTtBQUN6RCxPQUFPLE9BQU8sTUFBTSwyQkFBMkIsQ0FBQTtBQUMvQyxPQUFPLElBQUksTUFBTSxTQUFTLENBQUE7QUFDMUIsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLFVBQVUsQ0FBQTtBQUVwQyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRTtJQUMzQixNQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDO1FBQzlCLFNBQVMsRUFBRTtZQUNULFFBQVEsRUFBRTtnQkFDUixTQUFTLEVBQUUsRUFBRTthQUNkO1lBQ0QsT0FBTyxFQUFFLElBQUksT0FBTyxFQUFFO1NBQ3ZCO0tBQ0YsQ0FBQyxDQUFBO0lBQ0YsTUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFBO0lBQzFCLFNBQVMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUE7SUFDeEIsYUFBYSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQTtJQUU1QixDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsb0NBQW9DLENBQUMsQ0FBQTtJQUMvRSxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxDQUFDLEVBQUUscUNBQXFDLENBQUMsQ0FBQTtJQUVqRixNQUFNLFlBQVksR0FBRyxJQUFJLENBQUE7SUFDekIsTUFBTSxVQUFVLEdBQUcsYUFBYSxDQUFBO0lBQ2hDLE1BQU0sV0FBVyxHQUFRO1FBQ3ZCLE1BQU0sRUFBRSxFQUFFLE9BQU8sRUFBRSxFQUFFLENBQUMsVUFBVSxDQUFDLEVBQUUsRUFBRSxJQUFJLEVBQUUsWUFBWSxFQUFFLEVBQUUsRUFBRTtRQUM3RCxRQUFRLEVBQUUsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFO0tBQy9CLENBQUE7SUFFRCxDQUFDLENBQUMsS0FBSyxDQUNMLGFBQWEsQ0FBQyxlQUFlLENBQUMsV0FBVyxDQUFDLEVBQzFDLFlBQVksRUFDWixtQkFBbUIsQ0FBQyxDQUFBO0lBRXRCLE1BQU0sYUFBYSxHQUFHLEdBQUcsQ0FBQTtJQUV6QixXQUFXLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQyxLQUFLLEdBQUcsYUFBYSxDQUFBO0lBQzVELE9BQU8sV0FBVyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFBO0lBRWxELENBQUMsQ0FBQyxLQUFLLENBQ0wsYUFBYSxDQUFDLGVBQWUsQ0FBQyxXQUFXLENBQUMsRUFDMUMsYUFBYSxFQUNiLHNDQUFzQyxDQUFDLENBQUE7SUFFekMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFBO0FBQ1QsQ0FBQyxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdGVzdCBmcm9tICdAaW50ZXJhY3Rqcy9fZGV2L3Rlc3QvdGVzdCdcbmltcG9ydCAqIGFzIGhlbHBlcnMgZnJvbSAnQGludGVyYWN0anMvY29yZS90ZXN0cy9oZWxwZXJzJ1xuaW1wb3J0IFNpZ25hbHMgZnJvbSAnQGludGVyYWN0anMvdXRpbHMvU2lnbmFscydcbmltcG9ydCBob2xkIGZyb20gJy4uL2hvbGQnXG5pbXBvcnQgeyBhdXRvU3RhcnQgfSBmcm9tICcuLi9pbmRleCdcblxudGVzdCgnYXV0b1N0YXJ0L2hvbGQnLCAodCkgPT4ge1xuICBjb25zdCBzY29wZSA9IGhlbHBlcnMubW9ja1Njb3BlKHtcbiAgICBhdXRvU3RhcnQ6IHtcbiAgICAgIGRlZmF1bHRzOiB7XG4gICAgICAgIHBlckFjdGlvbjoge30sXG4gICAgICB9LFxuICAgICAgc2lnbmFsczogbmV3IFNpZ25hbHMoKSxcbiAgICB9LFxuICB9KVxuICBjb25zdCBhdXRvU3RhcnRIb2xkID0gaG9sZFxuICBhdXRvU3RhcnQuaW5zdGFsbChzY29wZSlcbiAgYXV0b1N0YXJ0SG9sZC5pbnN0YWxsKHNjb3BlKVxuXG4gIHQuZXF1YWwoc2NvcGUuZGVmYXVsdHMucGVyQWN0aW9uLmhvbGQsIDAsICdzZXRzIHNjb3BlLmRlZmF1bHRzLnBlckFjdGlvbi5ob2xkJylcbiAgdC5lcXVhbChzY29wZS5kZWZhdWx0cy5wZXJBY3Rpb24uZGVsYXksIDAsICdiYWNrd2FyZHMgY29tcGF0aWJsZSBcImRlbGF5XCIgYWxpYXMuJylcblxuICBjb25zdCBob2xkRHVyYXRpb24gPSAxMDAwXG4gIGNvbnN0IGFjdGlvbk5hbWUgPSAnVEVTVF9BQ1RJT04nXG4gIGNvbnN0IGludGVyYWN0aW9uOiBhbnkgPSB7XG4gICAgdGFyZ2V0OiB7IG9wdGlvbnM6IHsgW2FjdGlvbk5hbWVdOiB7IGhvbGQ6IGhvbGREdXJhdGlvbiB9IH0gfSxcbiAgICBwcmVwYXJlZDogeyBuYW1lOiBhY3Rpb25OYW1lIH0sXG4gIH1cblxuICB0LmVxdWFsKFxuICAgIGF1dG9TdGFydEhvbGQuZ2V0SG9sZER1cmF0aW9uKGludGVyYWN0aW9uKSxcbiAgICBob2xkRHVyYXRpb24sXG4gICAgJ2dldHMgaG9sZER1cmF0aW9uJylcblxuICBjb25zdCBkZWxheUR1cmF0aW9uID0gNTAwXG5cbiAgaW50ZXJhY3Rpb24udGFyZ2V0Lm9wdGlvbnNbYWN0aW9uTmFtZV0uZGVsYXkgPSBkZWxheUR1cmF0aW9uXG4gIGRlbGV0ZSBpbnRlcmFjdGlvbi50YXJnZXQub3B0aW9uc1thY3Rpb25OYW1lXS5ob2xkXG5cbiAgdC5lcXVhbChcbiAgICBhdXRvU3RhcnRIb2xkLmdldEhvbGREdXJhdGlvbihpbnRlcmFjdGlvbiksXG4gICAgZGVsYXlEdXJhdGlvbixcbiAgICAnZ2V0cyBob2xkRHVyYXRpb24gZnJvbSBcImRlbGF5XCIgdmFsdWUnKVxuXG4gIHQuZW5kKClcbn0pXG4iXX0=