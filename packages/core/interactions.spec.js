import test from '@interactjs/_dev/test/test';
import Signals from '@interactjs/utils/Signals';
import Interaction from './Interaction';
import interactions from './interactions';
import * as helpers from './tests/_helpers';
test('interactions', (t) => {
    let scope = helpers.mockScope();
    const interaction = interactions.newInteraction({ pointerType: 'TEST' }, scope);
    t.equal(scope.interactions.list[0], interaction, 'new Interaction is pushed to scope.interactions');
    t.ok(scope.interactions instanceof Object, 'interactions object added to scope');
    const listeners = scope.interactions.listeners;
    t.ok(interactions.methodNames.reduce((acc, m) => acc && typeof listeners[m] === 'function', true), 'interactions object added to scope');
    scope = helpers.mockScope();
    const newInteraction = scope.interactions.new({});
    t.assert(typeof scope.interactions === 'object');
    t.assert(scope.interactions.signals instanceof Signals);
    t.assert(typeof scope.interactions.new === 'function');
    t.assert(newInteraction instanceof Interaction);
    t.equal(newInteraction._signals, scope.interactions.signals);
    t.assert(typeof scope.actions === 'object');
    t.deepEqual(scope.actions.names, []);
    t.deepEqual(scope.actions.methodDict, {});
    t.end();
});
test('interactions document event options', (t) => {
    const scope = helpers.mockScope();
    const doc = scope.document;
    let options = {};
    scope.browser = { isIOS: false };
    scope.signals.fire('add-document', { doc, scope, options });
    t.deepEqual(options, {}, 'no doc options.event.passive is added when not iOS');
    options = {};
    scope.browser.isIOS = true;
    scope.signals.fire('add-document', { doc, scope, options });
    t.deepEqual(options, { events: { passive: false } }, 'doc options.event.passive is set to false for iOS');
    t.end();
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJhY3Rpb25zLnNwZWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbnRlcmFjdGlvbnMuc3BlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLElBQUksTUFBTSw0QkFBNEIsQ0FBQTtBQUM3QyxPQUFPLE9BQU8sTUFBTSwyQkFBMkIsQ0FBQTtBQUMvQyxPQUFPLFdBQVcsTUFBTSxlQUFlLENBQUE7QUFDdkMsT0FBTyxZQUFZLE1BQU0sZ0JBQWdCLENBQUE7QUFDekMsT0FBTyxLQUFLLE9BQU8sTUFBTSxrQkFBa0IsQ0FBQTtBQUUzQyxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUU7SUFDekIsSUFBSSxLQUFLLEdBQUcsT0FBTyxDQUFDLFNBQVMsRUFBRSxDQUFBO0lBRS9CLE1BQU0sV0FBVyxHQUFHLFlBQVksQ0FBQyxjQUFjLENBQzdDLEVBQUUsV0FBVyxFQUFFLE1BQU0sRUFBRSxFQUN2QixLQUFLLENBQ04sQ0FBQTtJQUVELENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsV0FBVyxFQUM3QyxpREFBaUQsQ0FBQyxDQUFBO0lBRXBELENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLFlBQVksWUFBWSxNQUFNLEVBQUUsb0NBQW9DLENBQUMsQ0FBQTtJQUVoRixNQUFNLFNBQVMsR0FBRyxLQUFLLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQTtJQUU5QyxDQUFDLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsR0FBRyxJQUFJLE9BQU8sU0FBUyxDQUFDLENBQUMsQ0FBQyxLQUFLLFVBQVUsRUFBRSxJQUFJLENBQUMsRUFDL0Ysb0NBQW9DLENBQUMsQ0FBQTtJQUV2QyxLQUFLLEdBQUcsT0FBTyxDQUFDLFNBQVMsRUFBRSxDQUFBO0lBRTNCLE1BQU0sY0FBYyxHQUFHLEtBQUssQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFBO0lBRWpELENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxLQUFLLENBQUMsWUFBWSxLQUFLLFFBQVEsQ0FBQyxDQUFBO0lBQ2hELENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxPQUFPLFlBQVksT0FBTyxDQUFDLENBQUE7SUFDdkQsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLEtBQUssQ0FBQyxZQUFZLENBQUMsR0FBRyxLQUFLLFVBQVUsQ0FBQyxDQUFBO0lBQ3RELENBQUMsQ0FBQyxNQUFNLENBQUMsY0FBYyxZQUFZLFdBQVcsQ0FBQyxDQUFBO0lBQy9DLENBQUMsQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLFFBQVEsRUFBRSxLQUFLLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFBO0lBRTVELENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxLQUFLLENBQUMsT0FBTyxLQUFLLFFBQVEsQ0FBQyxDQUFBO0lBQzNDLENBQUMsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUE7SUFDcEMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRSxFQUFFLENBQUMsQ0FBQTtJQUV6QyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUE7QUFDVCxDQUFDLENBQUMsQ0FBQTtBQUVGLElBQUksQ0FBQyxxQ0FBcUMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFO0lBQ2hELE1BQU0sS0FBSyxHQUFHLE9BQU8sQ0FBQyxTQUFTLEVBQUUsQ0FBQTtJQUNqQyxNQUFNLEdBQUcsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFBO0lBRTFCLElBQUksT0FBTyxHQUFHLEVBQUUsQ0FBQTtJQUNoQixLQUFLLENBQUMsT0FBTyxHQUFHLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxDQUFBO0lBQ2hDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQTtJQUUzRCxDQUFDLENBQUMsU0FBUyxDQUNULE9BQU8sRUFDUCxFQUFFLEVBQ0Ysb0RBQW9ELENBQUMsQ0FBQTtJQUV2RCxPQUFPLEdBQUcsRUFBRSxDQUFBO0lBRVosS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFBO0lBQzFCLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQTtJQUUzRCxDQUFDLENBQUMsU0FBUyxDQUNULE9BQU8sRUFDUCxFQUFFLE1BQU0sRUFBRSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUM5QixtREFBbUQsQ0FBQyxDQUFBO0lBRXRELENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQTtBQUNULENBQUMsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHRlc3QgZnJvbSAnQGludGVyYWN0anMvX2Rldi90ZXN0L3Rlc3QnXG5pbXBvcnQgU2lnbmFscyBmcm9tICdAaW50ZXJhY3Rqcy91dGlscy9TaWduYWxzJ1xuaW1wb3J0IEludGVyYWN0aW9uIGZyb20gJy4vSW50ZXJhY3Rpb24nXG5pbXBvcnQgaW50ZXJhY3Rpb25zIGZyb20gJy4vaW50ZXJhY3Rpb25zJ1xuaW1wb3J0ICogYXMgaGVscGVycyBmcm9tICcuL3Rlc3RzL19oZWxwZXJzJ1xuXG50ZXN0KCdpbnRlcmFjdGlvbnMnLCAodCkgPT4ge1xuICBsZXQgc2NvcGUgPSBoZWxwZXJzLm1vY2tTY29wZSgpXG5cbiAgY29uc3QgaW50ZXJhY3Rpb24gPSBpbnRlcmFjdGlvbnMubmV3SW50ZXJhY3Rpb24oXG4gICAgeyBwb2ludGVyVHlwZTogJ1RFU1QnIH0sXG4gICAgc2NvcGVcbiAgKVxuXG4gIHQuZXF1YWwoc2NvcGUuaW50ZXJhY3Rpb25zLmxpc3RbMF0sIGludGVyYWN0aW9uLFxuICAgICduZXcgSW50ZXJhY3Rpb24gaXMgcHVzaGVkIHRvIHNjb3BlLmludGVyYWN0aW9ucycpXG5cbiAgdC5vayhzY29wZS5pbnRlcmFjdGlvbnMgaW5zdGFuY2VvZiBPYmplY3QsICdpbnRlcmFjdGlvbnMgb2JqZWN0IGFkZGVkIHRvIHNjb3BlJylcblxuICBjb25zdCBsaXN0ZW5lcnMgPSBzY29wZS5pbnRlcmFjdGlvbnMubGlzdGVuZXJzXG5cbiAgdC5vayhpbnRlcmFjdGlvbnMubWV0aG9kTmFtZXMucmVkdWNlKChhY2MsIG0pID0+IGFjYyAmJiB0eXBlb2YgbGlzdGVuZXJzW21dID09PSAnZnVuY3Rpb24nLCB0cnVlKSxcbiAgICAnaW50ZXJhY3Rpb25zIG9iamVjdCBhZGRlZCB0byBzY29wZScpXG5cbiAgc2NvcGUgPSBoZWxwZXJzLm1vY2tTY29wZSgpXG5cbiAgY29uc3QgbmV3SW50ZXJhY3Rpb24gPSBzY29wZS5pbnRlcmFjdGlvbnMubmV3KHt9KVxuXG4gIHQuYXNzZXJ0KHR5cGVvZiBzY29wZS5pbnRlcmFjdGlvbnMgPT09ICdvYmplY3QnKVxuICB0LmFzc2VydChzY29wZS5pbnRlcmFjdGlvbnMuc2lnbmFscyBpbnN0YW5jZW9mIFNpZ25hbHMpXG4gIHQuYXNzZXJ0KHR5cGVvZiBzY29wZS5pbnRlcmFjdGlvbnMubmV3ID09PSAnZnVuY3Rpb24nKVxuICB0LmFzc2VydChuZXdJbnRlcmFjdGlvbiBpbnN0YW5jZW9mIEludGVyYWN0aW9uKVxuICB0LmVxdWFsKG5ld0ludGVyYWN0aW9uLl9zaWduYWxzLCBzY29wZS5pbnRlcmFjdGlvbnMuc2lnbmFscylcblxuICB0LmFzc2VydCh0eXBlb2Ygc2NvcGUuYWN0aW9ucyA9PT0gJ29iamVjdCcpXG4gIHQuZGVlcEVxdWFsKHNjb3BlLmFjdGlvbnMubmFtZXMsIFtdKVxuICB0LmRlZXBFcXVhbChzY29wZS5hY3Rpb25zLm1ldGhvZERpY3QsIHt9KVxuXG4gIHQuZW5kKClcbn0pXG5cbnRlc3QoJ2ludGVyYWN0aW9ucyBkb2N1bWVudCBldmVudCBvcHRpb25zJywgKHQpID0+IHtcbiAgY29uc3Qgc2NvcGUgPSBoZWxwZXJzLm1vY2tTY29wZSgpXG4gIGNvbnN0IGRvYyA9IHNjb3BlLmRvY3VtZW50XG5cbiAgbGV0IG9wdGlvbnMgPSB7fVxuICBzY29wZS5icm93c2VyID0geyBpc0lPUzogZmFsc2UgfVxuICBzY29wZS5zaWduYWxzLmZpcmUoJ2FkZC1kb2N1bWVudCcsIHsgZG9jLCBzY29wZSwgb3B0aW9ucyB9KVxuXG4gIHQuZGVlcEVxdWFsKFxuICAgIG9wdGlvbnMsXG4gICAge30sXG4gICAgJ25vIGRvYyBvcHRpb25zLmV2ZW50LnBhc3NpdmUgaXMgYWRkZWQgd2hlbiBub3QgaU9TJylcblxuICBvcHRpb25zID0ge31cblxuICBzY29wZS5icm93c2VyLmlzSU9TID0gdHJ1ZVxuICBzY29wZS5zaWduYWxzLmZpcmUoJ2FkZC1kb2N1bWVudCcsIHsgZG9jLCBzY29wZSwgb3B0aW9ucyB9KVxuXG4gIHQuZGVlcEVxdWFsKFxuICAgIG9wdGlvbnMsXG4gICAgeyBldmVudHM6IHsgcGFzc2l2ZTogZmFsc2UgfSB9LFxuICAgICdkb2Mgb3B0aW9ucy5ldmVudC5wYXNzaXZlIGlzIHNldCB0byBmYWxzZSBmb3IgaU9TJylcblxuICB0LmVuZCgpXG59KVxuIl19