import * as utils from '@interactjs/utils';
import domObjects from '@interactjs/utils/domObjects';
import defaults from './defaultOptions';
import Eventable from './Eventable';
import InteractableBase from './Interactable';
import InteractableSet from './InteractableSet';
import InteractEvent from './InteractEvent';
import interactions from './interactions';
const { win, browser, raf, Signals, events, } = utils;
export var ActionName;
(function (ActionName) {
})(ActionName || (ActionName = {}));
export function createScope() {
    return new Scope();
}
export class Scope {
    constructor() {
        this.id = `__interact_scope_${Math.floor(Math.random() * 100)}`;
        this.signals = new Signals();
        this.browser = browser;
        this.events = events;
        this.utils = utils;
        this.defaults = utils.clone(defaults);
        this.Eventable = Eventable;
        this.actions = {
            names: [],
            methodDict: {},
            eventTypes: [],
        };
        this.InteractEvent = InteractEvent;
        this.interactables = new InteractableSet(this);
        // all documents being listened to
        this.documents = [];
        this._plugins = [];
        this._pluginMap = {};
        this.onWindowUnload = (event) => this.removeDocument(event.target);
        const scope = this;
        this.Interactable = class Interactable extends InteractableBase {
            get _defaults() { return scope.defaults; }
            set(options) {
                super.set(options);
                scope.interactables.signals.fire('set', {
                    options,
                    interactable: this,
                });
                return this;
            }
            unset() {
                super.unset();
                for (const interaction of scope.interactions.list) {
                    if (interaction.interactable === this) {
                        interaction.stop();
                    }
                    scope.interactions.signals.fire('destroy', { interaction });
                    interaction.destroy();
                }
                scope.interactions.list = [];
                scope.interactables.signals.fire('unset', { interactable: this });
            }
        };
    }
    init(window) {
        return initScope(this, window);
    }
    pluginIsInstalled(plugin) {
        return this._pluginMap[plugin.id] || this._plugins.indexOf(plugin) !== -1;
    }
    usePlugin(plugin, options) {
        if (this.pluginIsInstalled(plugin)) {
            return this;
        }
        if (plugin.id) {
            this._pluginMap[plugin.id] = plugin;
        }
        plugin.install(this, options);
        this._plugins.push(plugin);
        return this;
    }
    addDocument(doc, options) {
        // do nothing if document is already known
        if (this.getDocIndex(doc) !== -1) {
            return false;
        }
        const window = win.getWindow(doc);
        options = options ? utils.extend({}, options) : {};
        this.documents.push({ doc, options });
        events.documents.push(doc);
        // don't add an unload event for the main document
        // so that the page may be cached in browser history
        if (doc !== this.document) {
            events.add(window, 'unload', this.onWindowUnload);
        }
        this.signals.fire('add-document', { doc, window, scope: this, options });
    }
    removeDocument(doc) {
        const index = this.getDocIndex(doc);
        const window = win.getWindow(doc);
        const options = this.documents[index].options;
        events.remove(window, 'unload', this.onWindowUnload);
        this.documents.splice(index, 1);
        events.documents.splice(index, 1);
        this.signals.fire('remove-document', { doc, window, scope: this, options });
    }
    getDocIndex(doc) {
        for (let i = 0; i < this.documents.length; i++) {
            if (this.documents[i].doc === doc) {
                return i;
            }
        }
        return -1;
    }
    getDocOptions(doc) {
        const docIndex = this.getDocIndex(doc);
        return docIndex === -1 ? null : this.documents[docIndex].options;
    }
    now() {
        return (this.window.Date || Date).now();
    }
}
export function initScope(scope, window) {
    win.init(window);
    domObjects.init(window);
    browser.init(window);
    raf.init(window);
    events.init(window);
    scope.usePlugin(interactions);
    scope.document = window.document;
    scope.window = window;
    return scope;
}
//# sourceMappingURL=data:application/json;base64,