import test from '@interactjs/_dev/test/test';
import { drag, resize } from '@interactjs/actions';
import * as helpers from '@interactjs/core/tests/_helpers';
import * as utils from '@interactjs/utils';
import * as devTools from './';
test('devTools', (t) => {
    const scope = helpers.mockScope();
    const logs = [];
    function log(args, type) {
        logs.push({ args, type });
    }
    scope.usePlugin(devTools, {
        logger: {
            warn(...args) { log(args, 'warn'); },
            log(...args) { log(args, 'log'); },
            error(...args) { log(args, 'error'); },
        },
    });
    scope.usePlugin(drag);
    scope.usePlugin(resize);
    const element = scope.document.body.appendChild(scope.document.createElement('div'));
    const event = utils.pointer.coordsToEvent(utils.pointer.newCoords());
    const interactable = scope.interactables.new(element)
        .draggable(true)
        .resizable({ onmove: () => { } });
    const interaction = scope.interactions.new({});
    interaction.pointerDown(event, event, element);
    interaction.start({ name: 'drag' }, interactable, element);
    t.deepEqual(logs[0], { args: [devTools.touchActionMessage, element, devTools.links.touchAction], type: 'warn' }, 'warning about missing touchAction');
    t.deepEqual(logs[1], { args: [devTools.noListenersMessage, 'drag', interactable], type: 'warn' }, 'warning about missing move listeners');
    interaction.stop();
    // resolve touchAction
    element.style.touchAction = 'none';
    // resolve missing listeners
    interactable.on('dragmove', () => { });
    interaction.start({ name: 'resize' }, interactable, element);
    interaction.pointerMove(event, event, element);
    interaction.end();
    t.deepEqual(logs[2], { args: [devTools.boxSizingMessage, element, devTools.links.boxSizing], type: 'warn' }, 'warning about resizing without "box-sizing: none"');
    // resolve boxSizing
    element.style.boxSizing = 'border-box';
    interaction.start({ name: 'resize' }, interactable, element);
    interaction.move({ event, pointer: event });
    interaction.end();
    interaction.start({ name: 'drag' }, interactable, element);
    interaction.pointerMove(event, event, element);
    interaction.end();
    t.equal(logs.length, 3, 'no warnings when issues are resolved');
    t.end();
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGV2VG9vbHMuc3BlYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImRldlRvb2xzLnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxJQUFJLE1BQU0sNEJBQTRCLENBQUE7QUFDN0MsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQTtBQUNsRCxPQUFPLEtBQUssT0FBTyxNQUFNLGlDQUFpQyxDQUFBO0FBQzFELE9BQU8sS0FBSyxLQUFLLE1BQU0sbUJBQW1CLENBQUE7QUFDMUMsT0FBTyxLQUFLLFFBQVEsTUFBTSxJQUFJLENBQUE7QUFFOUIsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFO0lBQ3JCLE1BQU0sS0FBSyxHQUFtQixPQUFPLENBQUMsU0FBUyxFQUFFLENBQUE7SUFDakQsTUFBTSxJQUFJLEdBQXdELEVBQUUsQ0FBQTtJQUVwRSxTQUFTLEdBQUcsQ0FBRSxJQUFJLEVBQUUsSUFBSTtRQUN0QixJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUE7SUFDM0IsQ0FBQztJQUVELEtBQUssQ0FBQyxTQUFTLENBQUMsUUFBUSxFQUFFO1FBQ3hCLE1BQU0sRUFBRTtZQUNOLElBQUksQ0FBRSxHQUFHLElBQUksSUFBSSxHQUFHLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFBLENBQUMsQ0FBQztZQUNwQyxHQUFHLENBQUUsR0FBRyxJQUFJLElBQUksR0FBRyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQSxDQUFDLENBQUM7WUFDbEMsS0FBSyxDQUFFLEdBQUcsSUFBSSxJQUFJLEdBQUcsQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUEsQ0FBQyxDQUFDO1NBQ3ZDO0tBQ0YsQ0FBQyxDQUFBO0lBRUYsS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUNyQixLQUFLLENBQUMsU0FBUyxD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RUFBRSxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUE7SUFDOUMsV0FBVyxDQUFDLEdBQUcsRUFBRSxDQUFBO0lBRWpCLENBQUMsQ0FBQyxLQUFLLENBQ0wsSUFBSSxDQUFDLE1BQU0sRUFDWCxDQUFDLEVBQ0Qsc0NBQXNDLENBQUMsQ0FBQTtJQUV6QyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUE7QUFDVCxDQUFDLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0ZXN0IGZyb20gJ0BpbnRlcmFjdGpzL19kZXYvdGVzdC90ZXN0J1xuaW1wb3J0IHsgZHJhZywgcmVzaXplIH0gZnJvbSAnQGludGVyYWN0anMvYWN0aW9ucydcbmltcG9ydCAqIGFzIGhlbHBlcnMgZnJvbSAnQGludGVyYWN0anMvY29yZS90ZXN0cy9faGVscGVycydcbmltcG9ydCAqIGFzIHV0aWxzIGZyb20gJ0BpbnRlcmFjdGpzL3V0aWxzJ1xuaW1wb3J0ICogYXMgZGV2VG9vbHMgZnJvbSAnLi8nXG5cbnRlc3QoJ2RldlRvb2xzJywgKHQpID0+IHtcbiAgY29uc3Qgc2NvcGU6IEludGVyYWN0LlNjb3BlID0gaGVscGVycy5tb2NrU2NvcGUoKVxuICBjb25zdCBsb2dzOiBBcnJheTx7IGFyZ3M6IGFueVtdLCB0eXBlOiBrZXlvZiBkZXZUb29scy5Mb2dnZXIgfT4gPSBbXVxuXG4gIGZ1bmN0aW9uIGxvZyAoYXJncywgdHlwZSkge1xuICAgIGxvZ3MucHVzaCh7IGFyZ3MsIHR5cGUgfSlcbiAgfVxuXG4gIHNjb3BlLnVzZVBsdWdpbihkZXZUb29scywge1xuICAgIGxvZ2dlcjoge1xuICAgICAgd2FybiAoLi4uYXJncykgeyBsb2coYXJncywgJ3dhcm4nKSB9LFxuICAgICAgbG9nICguLi5hcmdzKSB7IGxvZyhhcmdzLCAnbG9nJykgfSxcbiAgICAgIGVycm9yICguLi5hcmdzKSB7IGxvZyhhcmdzLCAnZXJyb3InKSB9LFxuICAgIH0sXG4gIH0pXG5cbiAgc2NvcGUudXNlUGx1Z2luKGRyYWcpXG4gIHNjb3BlLnVzZVBsdWdpbihyZXNpemUpXG5cbiAgY29uc3QgZWxlbWVudCA9IHNjb3BlLmRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoc2NvcGUuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykpXG4gIGNvbnN0IGV2ZW50ID0gdXRpbHMucG9pbnRlci5jb29yZHNUb0V2ZW50KHV0aWxzLnBvaW50ZXIubmV3Q29vcmRzKCkpXG4gIGNvbnN0IGludGVyYWN0YWJsZSA9IHNjb3BlLmludGVyYWN0YWJsZXMubmV3KGVsZW1lbnQpXG4gICAgLmRyYWdnYWJsZSh0cnVlKVxuICAgIC5yZXNpemFibGUoeyBvbm1vdmU6ICgpID0+IHt9IH0pXG4gIGNvbnN0IGludGVyYWN0aW9uID0gc2NvcGUuaW50ZXJhY3Rpb25zLm5ldyh7fSlcblxuICBpbnRlcmFjdGlvbi5wb2ludGVyRG93bihldmVudCwgZXZlbnQsIGVsZW1lbnQpXG4gIGludGVyYWN0aW9uLnN0YXJ0KHsgbmFtZTogJ2RyYWcnIH0sIGludGVyYWN0YWJsZSwgZWxlbWVudClcblxuICB0LmRlZXBFcXVhbChcbiAgICBsb2dzWzBdLFxuICAgIHsgYXJnczogW2RldlRvb2xzLnRvdWNoQWN0aW9uTWVzc2FnZSwgZWxlbWVudCwgZGV2VG9vbHMubGlua3MudG91Y2hBY3Rpb25dLCB0eXBlOiAnd2FybicgfSxcbiAgICAnd2FybmluZyBhYm91dCBtaXNzaW5nIHRvdWNoQWN0aW9uJylcblxuICB0LmRlZXBFcXVhbChcbiAgICBsb2dzWzFdLFxuICAgIHsgYXJnczogW2RldlRvb2xzLm5vTGlzdGVuZXJzTWVzc2FnZSwgJ2RyYWcnLCBpbnRlcmFjdGFibGVdLCB0eXBlOiAnd2FybicgfSxcbiAgICAnd2FybmluZyBhYm91dCBtaXNzaW5nIG1vdmUgbGlzdGVuZXJzJylcblxuICBpbnRlcmFjdGlvbi5zdG9wKClcblxuICAvLyByZXNvbHZlIHRvdWNoQWN0aW9uXG4gIGVsZW1lbnQuc3R5bGUudG91Y2hBY3Rpb24gPSAnbm9uZSdcbiAgLy8gcmVzb2x2ZSBtaXNzaW5nIGxpc3RlbmVyc1xuICBpbnRlcmFjdGFibGUub24oJ2RyYWdtb3ZlJywgKCkgPT4ge30pXG5cbiAgaW50ZXJhY3Rpb24uc3RhcnQoeyBuYW1lOiAncmVzaXplJyB9LCBpbnRlcmFjdGFibGUsIGVsZW1lbnQpXG4gIGludGVyYWN0aW9uLnBvaW50ZXJNb3ZlKGV2ZW50LCBldmVudCwgZWxlbWVudClcbiAgaW50ZXJhY3Rpb24uZW5kKClcblxuICB0LmRlZXBFcXVhbChcbiAgICBsb2dzWzJdLFxuICAgIHsgYXJnczogW2RldlRvb2xzLmJveFNpemluZ01lc3NhZ2UsIGVsZW1lbnQsIGRldlRvb2xzLmxpbmtzLmJveFNpemluZ10sIHR5cGU6ICd3YXJuJyB9LFxuICAgICd3YXJuaW5nIGFib3V0IHJlc2l6aW5nIHdpdGhvdXQgXCJib3gtc2l6aW5nOiBub25lXCInKVxuXG4gIC8vIHJlc29sdmUgYm94U2l6aW5nXG4gIGVsZW1lbnQuc3R5bGUuYm94U2l6aW5nID0gJ2JvcmRlci1ib3gnXG5cbiAgaW50ZXJhY3Rpb24uc3RhcnQoeyBuYW1lOiAncmVzaXplJyB9LCBpbnRlcmFjdGFibGUsIGVsZW1lbnQpXG4gIGludGVyYWN0aW9uLm1vdmUoeyBldmVudCwgcG9pbnRlcjogZXZlbnQgfSlcbiAgaW50ZXJhY3Rpb24uZW5kKClcblxuICBpbnRlcmFjdGlvbi5zdGFydCh7IG5hbWU6ICdkcmFnJyB9LCBpbnRlcmFjdGFibGUsIGVsZW1lbnQpXG4gIGludGVyYWN0aW9uLnBvaW50ZXJNb3ZlKGV2ZW50LCBldmVudCwgZWxlbWVudClcbiAgaW50ZXJhY3Rpb24uZW5kKClcblxuICB0LmVxdWFsKFxuICAgIGxvZ3MubGVuZ3RoLFxuICAgIDMsXG4gICAgJ25vIHdhcm5pbmdzIHdoZW4gaXNzdWVzIGFyZSByZXNvbHZlZCcpXG5cbiAgdC5lbmQoKVxufSlcbiJdfQ==