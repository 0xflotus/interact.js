import { JSDOM } from '@interactjs/_dev/test/domator';
import test from '@interactjs/_dev/test/test';
import interactions from '@interactjs/core/interactions';
import interact, { scope } from './interact';
test('interact export', (t) => {
    scope.init(new JSDOM('').window);
    interactions.install(scope);
    const interactable1 = interact('selector');
    t.assert(interactable1 instanceof scope.Interactable, 'interact function returns Interactable instance');
    t.equal(interact('selector'), interactable1, 'same interactable is returned with same target and context');
    t.equal(scope.interactables.list.length, 1, 'new interactables are added to list');
    interactable1.unset();
    t.equal(scope.interactables.list.length, 0, 'unset interactables are removed');
    const constructsUniqueMessage = 'unique contexts make unique interactables with identical targets';
    const doc1 = new JSDOM('').window.document;
    const doc2 = new JSDOM('').window.document;
    const results = [
        ['repeat', doc1],
        ['repeat', doc2],
        [doc1, doc1],
        [doc2.body, doc2],
    ].reduce((acc, [target, context]) => {
        const interactable = interact(target, { context });
        if (acc.includes(interactable)) {
            t.fail(constructsUniqueMessage);
        }
        acc.push({ interactable, target, context });
        return acc;
    }, []);
    t.pass(constructsUniqueMessage);
    const getsUniqueMessage = 'interactions.get returns correct result with identical targets and different contexts';
    for (const { interactable, target, context } of results) {
        if (scope.interactables.get(target, { context }) !== interactable) {
            t.fail(getsUniqueMessage);
        }
    }
    t.pass(getsUniqueMessage);
    scope.interactables.list.forEach((i) => i.unset());
    t.end();
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJhY3Quc3BlYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImludGVyYWN0LnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLCtCQUErQixDQUFBO0FBQ3JELE9BQU8sSUFBSSxNQUFNLDRCQUE0QixDQUFBO0FBQzdDLE9BQU8sWUFBWSxNQUFNLCtCQUErQixDQUFBO0FBQ3hELE9BQU8sUUFBUSxFQUFFLEVBQUUsS0FBSyxFQUFFLE1BQU0sWUFBWSxDQUFBO0FBRTVDLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFO0lBQzVCLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUE7SUFDaEMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQTtJQUUzQixNQUFNLGFBQWEsR0FBRyxRQUFRLENBQUMsVUFBVSxDQUFDLENBQUE7SUFDMUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxhQUFhLFlBQVksS0FBSyxDQUFDLFlBQVksRUFDbEQsaURBQWlELENBQUMsQ0FBQTtJQUNwRCxDQUFDLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsRUFBRSxhQUFhLEVBQ3pDLDREQUE0RCxDQUFDLENBQUE7SUFDL0QsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUN4QyxxQ0FBcUMsQ0FBQyxDQUFBO0lBRXhDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsQ0FBQTtJQUNyQixDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQ3hDLGlDQUFpQyxDQUFDLENBQUE7SUFFcEMsTUFBTSx1QkFBdUIsR0FDM0Isa0VBQWtFLENBQUE7SUFFcEUsTUFBTSxJQUFJLEdBQUcsSUFBSSxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQTtJQUMxQyxNQUFNLElBQUksR0FBRyxJQUFJLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFBO0lBQzFDLE1BQU0sT0FBTyxHQUFHO1FBQ2QsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDO1FBQ2hCLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQztRQUNoQixDQUFDLElBQUksRUFBRSxJQUFJLENBQUM7UUFDWixDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDO0tBQ2xCLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxFQUFFLEVBQUU7UUFDbEMsTUFBTSxZQUFZLEdBQUcsUUFBUSxDQUFDLE1BQU0sRUFBRSxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUE7UUFFbEQsSUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxFQUFFO1lBQzlCLENBQUMsQ0FBQyxJQUFJLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtTQUNoQztRQUVELEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUE7UUFDM0MsT0FBTyxHQUFHLENBQUE7SUFDWixDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUE7SUFFTixDQUFDLENBQUMsSUFBSSxDQUFDLHVCQUF1QixDQUFDLENBQUE7SUFFL0IsTUFBTSxpQkFBaUIsR0FDckIsdUZBQXVGLENBQUE7SUFFekYsS0FBSyxNQUFNLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsSUFBSSxPQUFPLEVBQUU7UUFDdkQsSUFBSSxLQUFLLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsQ0FBQyxLQUFLLFlBQVksRUFBRTtZQUNqRSxDQUFDLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUE7U0FDMUI7S0FDRjtJQUVELENBQUMsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQTtJQUV6QixLQUFLLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFBO0lBRWxELENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQTtBQUNULENBQUMsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSlNET00gfSBmcm9tICdAaW50ZXJhY3Rqcy9fZGV2L3Rlc3QvZG9tYXRvcidcbmltcG9ydCB0ZXN0IGZyb20gJ0BpbnRlcmFjdGpzL19kZXYvdGVzdC90ZXN0J1xuaW1wb3J0IGludGVyYWN0aW9ucyBmcm9tICdAaW50ZXJhY3Rqcy9jb3JlL2ludGVyYWN0aW9ucydcbmltcG9ydCBpbnRlcmFjdCwgeyBzY29wZSB9IGZyb20gJy4vaW50ZXJhY3QnXG5cbnRlc3QoJ2ludGVyYWN0IGV4cG9ydCcsICh0KSA9PiB7XG4gIHNjb3BlLmluaXQobmV3IEpTRE9NKCcnKS53aW5kb3cpXG4gIGludGVyYWN0aW9ucy5pbnN0YWxsKHNjb3BlKVxuXG4gIGNvbnN0IGludGVyYWN0YWJsZTEgPSBpbnRlcmFjdCgnc2VsZWN0b3InKVxuICB0LmFzc2VydChpbnRlcmFjdGFibGUxIGluc3RhbmNlb2Ygc2NvcGUuSW50ZXJhY3RhYmxlLFxuICAgICdpbnRlcmFjdCBmdW5jdGlvbiByZXR1cm5zIEludGVyYWN0YWJsZSBpbnN0YW5jZScpXG4gIHQuZXF1YWwoaW50ZXJhY3QoJ3NlbGVjdG9yJyksIGludGVyYWN0YWJsZTEsXG4gICAgJ3NhbWUgaW50ZXJhY3RhYmxlIGlzIHJldHVybmVkIHdpdGggc2FtZSB0YXJnZXQgYW5kIGNvbnRleHQnKVxuICB0LmVxdWFsKHNjb3BlLmludGVyYWN0YWJsZXMubGlzdC5sZW5ndGgsIDEsXG4gICAgJ25ldyBpbnRlcmFjdGFibGVzIGFyZSBhZGRlZCB0byBsaXN0JylcblxuICBpbnRlcmFjdGFibGUxLnVuc2V0KClcbiAgdC5lcXVhbChzY29wZS5pbnRlcmFjdGFibGVzLmxpc3QubGVuZ3RoLCAwLFxuICAgICd1bnNldCBpbnRlcmFjdGFibGVzIGFyZSByZW1vdmVkJylcblxuICBjb25zdCBjb25zdHJ1Y3RzVW5pcXVlTWVzc2FnZSA9XG4gICAgJ3VuaXF1ZSBjb250ZXh0cyBtYWtlIHVuaXF1ZSBpbnRlcmFjdGFibGVzIHdpdGggaWRlbnRpY2FsIHRhcmdldHMnXG5cbiAgY29uc3QgZG9jMSA9IG5ldyBKU0RPTSgnJykud2luZG93LmRvY3VtZW50XG4gIGNvbnN0IGRvYzIgPSBuZXcgSlNET00oJycpLndpbmRvdy5kb2N1bWVudFxuICBjb25zdCByZXN1bHRzID0gW1xuICAgIFsncmVwZWF0JywgZG9jMV0sXG4gICAgWydyZXBlYXQnLCBkb2MyXSxcbiAgICBbZG9jMSwgZG9jMV0sXG4gICAgW2RvYzIuYm9keSwgZG9jMl0sXG4gIF0ucmVkdWNlKChhY2MsIFt0YXJnZXQsIGNvbnRleHRdKSA9PiB7XG4gICAgY29uc3QgaW50ZXJhY3RhYmxlID0gaW50ZXJhY3QodGFyZ2V0LCB7IGNvbnRleHQgfSlcblxuICAgIGlmIChhY2MuaW5jbHVkZXMoaW50ZXJhY3RhYmxlKSkge1xuICAgICAgdC5mYWlsKGNvbnN0cnVjdHNVbmlxdWVNZXNzYWdlKVxuICAgIH1cblxuICAgIGFjYy5wdXNoKHsgaW50ZXJhY3RhYmxlLCB0YXJnZXQsIGNvbnRleHQgfSlcbiAgICByZXR1cm4gYWNjXG4gIH0sIFtdKVxuXG4gIHQucGFzcyhjb25zdHJ1Y3RzVW5pcXVlTWVzc2FnZSlcblxuICBjb25zdCBnZXRzVW5pcXVlTWVzc2FnZSA9XG4gICAgJ2ludGVyYWN0aW9ucy5nZXQgcmV0dXJucyBjb3JyZWN0IHJlc3VsdCB3aXRoIGlkZW50aWNhbCB0YXJnZXRzIGFuZCBkaWZmZXJlbnQgY29udGV4dHMnXG5cbiAgZm9yIChjb25zdCB7IGludGVyYWN0YWJsZSwgdGFyZ2V0LCBjb250ZXh0IH0gb2YgcmVzdWx0cykge1xuICAgIGlmIChzY29wZS5pbnRlcmFjdGFibGVzLmdldCh0YXJnZXQsIHsgY29udGV4dCB9KSAhPT0gaW50ZXJhY3RhYmxlKSB7XG4gICAgICB0LmZhaWwoZ2V0c1VuaXF1ZU1lc3NhZ2UpXG4gICAgfVxuICB9XG5cbiAgdC5wYXNzKGdldHNVbmlxdWVNZXNzYWdlKVxuXG4gIHNjb3BlLmludGVyYWN0YWJsZXMubGlzdC5mb3JFYWNoKChpKSA9PiBpLnVuc2V0KCkpXG5cbiAgdC5lbmQoKVxufSlcbiJdfQ==