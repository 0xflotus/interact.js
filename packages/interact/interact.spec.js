import { JSDOM } from '@interactjs/_dev/test/domator';
import test from '@interactjs/_dev/test/test';
import interact, { scope } from './interact';
test('interact export', (t) => {
    scope.init(new JSDOM('').window);
    const interactable1 = interact('selector');
    t.assert(interactable1 instanceof scope.Interactable, 'interact function returns Interactable instance');
    t.equal(interact('selector'), interactable1, 'same interactable is returned with same target and context');
    t.equal(scope.interactables.list.length, 1, 'new interactables are added to list');
    interactable1.unset();
    t.equal(scope.interactables.list.length, 0, 'unset interactables are removed');
    const constructsUniqueMessage = 'unique contexts make unique interactables with identical targets';
    const doc1 = new JSDOM('').window.document;
    const doc2 = new JSDOM('').window.document;
    const results = [
        ['repeat', doc1],
        ['repeat', doc2],
        [doc1, doc1],
        [doc2.body, doc2],
    ].reduce((acc, [target, context]) => {
        const interactable = interact(target, { context });
        if (acc.includes(interactable)) {
            t.fail(constructsUniqueMessage);
        }
        acc.push({ interactable, target, context });
        return acc;
    }, []);
    t.pass(constructsUniqueMessage);
    const getsUniqueMessage = 'interactions.get returns correct result with identical targets and different contexts';
    for (const { interactable, target, context } of results) {
        if (scope.interactables.get(target, { context }) !== interactable) {
            t.fail(getsUniqueMessage);
        }
    }
    t.pass(getsUniqueMessage);
    const doc3 = new JSDOM('').window.document;
    const prevDocCount = scope.documents.length;
    interact.addDocument(doc3, { events: { passive: false } });
    t.deepEqual(scope.documents[prevDocCount], { doc: doc3, options: { events: { passive: false } } }, 'interact.addDocument() adds to scope with options');
    interact.removeDocument(doc3);
    t.equal(scope.documents.length, prevDocCount, 'interact.removeDocument() removes document from scope');
    scope.interactables.list.forEach((i) => i.unset());
    t.end();
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJhY3Quc3BlYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImludGVyYWN0LnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLCtCQUErQixDQUFBO0FBQ3JELE9BQU8sSUFBSSxNQUFNLDRCQUE0QixDQUFBO0FBQzdDLE9BQU8sUUFBUSxFQUFFLEVBQUUsS0FBSyxFQUFFLE1BQU0sWUFBWSxDQUFBO0FBRTVDLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFO0lBQzVCLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUE7SUFFaEMsTUFBTSxhQUFhLEdBQUcsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFBO0lBQzFDLENBQUMsQ0FBQyxNQUFNLENBQUMsYUFBYSxZQUFZLEtBQUssQ0FBQyxZQUFZLEVBQ2xELGlEQUFpRCxDQUFDLENBQUE7SUFDcEQsQ0FBQyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLEVBQUUsYUFBYSxFQUN6Qyw0REFBNEQsQ0FBQyxDQUFBO0lBQy9ELENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsRUFDeEMscUNBQXFDLENBQUMsQ0FBQTtJQUV4QyxhQUFhLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDckIsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUN4QyxpQ0FBaUMsQ0FBQyxDQUFBO0lBRXBDLE1BQU0sdUJBQXVCLEdBQzNCLGtFQUFrRSxDQUFBO0lBRXBFLE1BQU0sSUFBSSxHQUFHLElBQUksS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUE7SUFDMUMsTUFBTSxJQUFJLEdBQUcsSUFBSSxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQTtJQUMxQyxNQUFNLE9BQU8sR0FBRztRQUNkLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQztRQUNoQixDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUM7UUFDaEIsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDO1FBQ1osQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQztLQUNsQixDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsRUFBRSxFQUFFO1FBQ2xDLE1BQU0sWUFBWSxHQUFHLFFBQVEsQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFBO1FBRWxELElBQUksR0FBRyxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsRUFBRTtZQUM5QixDQUFDLENBQUMsSUFBSSxDQUFDLHVCQUF1QixDQUFDLENBQUE7U0FDaEM7UUFFRCxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFBO1FBQzNDLE9BQU8sR0FBRyxDQUFBO0lBQ1osQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFBO0lBRU4sQ0FBQyxDQUFDLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxDQUFBO0lBRS9CLE1BQU0saUJBQWlCLEdBQ3JCLHVGQUF1RixDQUFBO0lBRXpGLEtBQUssTUFBTSxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLElBQUksT0FBTyxFQUFFO1FBQ3ZELElBQUksS0FBSyxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLEVBQUUsT0FBTyxFQUFFLENBQUMsS0FBSyxZQUFZLEVBQUU7WUFDakUsQ0FBQyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFBO1NBQzFCO0tBQ0Y7SUFFRCxDQUFDLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUE7SUFFekIsTUFBTSxJQUFJLEdBQUcsSUFBSSxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQTtJQUUxQyxNQUFNLFlBQVksR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQTtJQUUzQyxRQUFRLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxFQUFFLE1BQU0sRUFBRSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUE7SUFDMUQsQ0FBQyxDQUFDLFNBQVMsQ0FDVCxLQUFLLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQyxFQUM3QixFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLEVBQUUsTUFBTSxFQUFFLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsRUFDdEQsbURBQW1ELENBQUMsQ0FBQTtJQUV0RCxRQUFRLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFBO0lBQzdCLENBQUMsQ0FBQyxLQUFLLENBQ0wsS0FBSyxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQ3RCLFlBQVksRUFDWix1REFBdUQsQ0FBQyxDQUFBO0lBRTFELEtBQUssQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUE7SUFFbEQsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFBO0FBQ1QsQ0FBQyxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBKU0RPTSB9IGZyb20gJ0BpbnRlcmFjdGpzL19kZXYvdGVzdC9kb21hdG9yJ1xuaW1wb3J0IHRlc3QgZnJvbSAnQGludGVyYWN0anMvX2Rldi90ZXN0L3Rlc3QnXG5pbXBvcnQgaW50ZXJhY3QsIHsgc2NvcGUgfSBmcm9tICcuL2ludGVyYWN0J1xuXG50ZXN0KCdpbnRlcmFjdCBleHBvcnQnLCAodCkgPT4ge1xuICBzY29wZS5pbml0KG5ldyBKU0RPTSgnJykud2luZG93KVxuXG4gIGNvbnN0IGludGVyYWN0YWJsZTEgPSBpbnRlcmFjdCgnc2VsZWN0b3InKVxuICB0LmFzc2VydChpbnRlcmFjdGFibGUxIGluc3RhbmNlb2Ygc2NvcGUuSW50ZXJhY3RhYmxlLFxuICAgICdpbnRlcmFjdCBmdW5jdGlvbiByZXR1cm5zIEludGVyYWN0YWJsZSBpbnN0YW5jZScpXG4gIHQuZXF1YWwoaW50ZXJhY3QoJ3NlbGVjdG9yJyksIGludGVyYWN0YWJsZTEsXG4gICAgJ3NhbWUgaW50ZXJhY3RhYmxlIGlzIHJldHVybmVkIHdpdGggc2FtZSB0YXJnZXQgYW5kIGNvbnRleHQnKVxuICB0LmVxdWFsKHNjb3BlLmludGVyYWN0YWJsZXMubGlzdC5sZW5ndGgsIDEsXG4gICAgJ25ldyBpbnRlcmFjdGFibGVzIGFyZSBhZGRlZCB0byBsaXN0JylcblxuICBpbnRlcmFjdGFibGUxLnVuc2V0KClcbiAgdC5lcXVhbChzY29wZS5pbnRlcmFjdGFibGVzLmxpc3QubGVuZ3RoLCAwLFxuICAgICd1bnNldCBpbnRlcmFjdGFibGVzIGFyZSByZW1vdmVkJylcblxuICBjb25zdCBjb25zdHJ1Y3RzVW5pcXVlTWVzc2FnZSA9XG4gICAgJ3VuaXF1ZSBjb250ZXh0cyBtYWtlIHVuaXF1ZSBpbnRlcmFjdGFibGVzIHdpdGggaWRlbnRpY2FsIHRhcmdldHMnXG5cbiAgY29uc3QgZG9jMSA9IG5ldyBKU0RPTSgnJykud2luZG93LmRvY3VtZW50XG4gIGNvbnN0IGRvYzIgPSBuZXcgSlNET00oJycpLndpbmRvdy5kb2N1bWVudFxuICBjb25zdCByZXN1bHRzID0gW1xuICAgIFsncmVwZWF0JywgZG9jMV0sXG4gICAgWydyZXBlYXQnLCBkb2MyXSxcbiAgICBbZG9jMSwgZG9jMV0sXG4gICAgW2RvYzIuYm9keSwgZG9jMl0sXG4gIF0ucmVkdWNlKChhY2MsIFt0YXJnZXQsIGNvbnRleHRdKSA9PiB7XG4gICAgY29uc3QgaW50ZXJhY3RhYmxlID0gaW50ZXJhY3QodGFyZ2V0LCB7IGNvbnRleHQgfSlcblxuICAgIGlmIChhY2MuaW5jbHVkZXMoaW50ZXJhY3RhYmxlKSkge1xuICAgICAgdC5mYWlsKGNvbnN0cnVjdHNVbmlxdWVNZXNzYWdlKVxuICAgIH1cblxuICAgIGFjYy5wdXNoKHsgaW50ZXJhY3RhYmxlLCB0YXJnZXQsIGNvbnRleHQgfSlcbiAgICByZXR1cm4gYWNjXG4gIH0sIFtdKVxuXG4gIHQucGFzcyhjb25zdHJ1Y3RzVW5pcXVlTWVzc2FnZSlcblxuICBjb25zdCBnZXRzVW5pcXVlTWVzc2FnZSA9XG4gICAgJ2ludGVyYWN0aW9ucy5nZXQgcmV0dXJucyBjb3JyZWN0IHJlc3VsdCB3aXRoIGlkZW50aWNhbCB0YXJnZXRzIGFuZCBkaWZmZXJlbnQgY29udGV4dHMnXG5cbiAgZm9yIChjb25zdCB7IGludGVyYWN0YWJsZSwgdGFyZ2V0LCBjb250ZXh0IH0gb2YgcmVzdWx0cykge1xuICAgIGlmIChzY29wZS5pbnRlcmFjdGFibGVzLmdldCh0YXJnZXQsIHsgY29udGV4dCB9KSAhPT0gaW50ZXJhY3RhYmxlKSB7XG4gICAgICB0LmZhaWwoZ2V0c1VuaXF1ZU1lc3NhZ2UpXG4gICAgfVxuICB9XG5cbiAgdC5wYXNzKGdldHNVbmlxdWVNZXNzYWdlKVxuXG4gIGNvbnN0IGRvYzMgPSBuZXcgSlNET00oJycpLndpbmRvdy5kb2N1bWVudFxuXG4gIGNvbnN0IHByZXZEb2NDb3VudCA9IHNjb3BlLmRvY3VtZW50cy5sZW5ndGhcblxuICBpbnRlcmFjdC5hZGREb2N1bWVudChkb2MzLCB7IGV2ZW50czogeyBwYXNzaXZlOiBmYWxzZSB9IH0pXG4gIHQuZGVlcEVxdWFsKFxuICAgIHNjb3BlLmRvY3VtZW50c1twcmV2RG9jQ291bnRdLFxuICAgIHsgZG9jOiBkb2MzLCBvcHRpb25zOiB7IGV2ZW50czogeyBwYXNzaXZlOiBmYWxzZSB9IH0gfSxcbiAgICAnaW50ZXJhY3QuYWRkRG9jdW1lbnQoKSBhZGRzIHRvIHNjb3BlIHdpdGggb3B0aW9ucycpXG5cbiAgaW50ZXJhY3QucmVtb3ZlRG9jdW1lbnQoZG9jMylcbiAgdC5lcXVhbChcbiAgICBzY29wZS5kb2N1bWVudHMubGVuZ3RoLFxuICAgIHByZXZEb2NDb3VudCxcbiAgICAnaW50ZXJhY3QucmVtb3ZlRG9jdW1lbnQoKSByZW1vdmVzIGRvY3VtZW50IGZyb20gc2NvcGUnKVxuXG4gIHNjb3BlLmludGVyYWN0YWJsZXMubGlzdC5mb3JFYWNoKChpKSA9PiBpLnVuc2V0KCkpXG5cbiAgdC5lbmQoKVxufSlcbiJdfQ==