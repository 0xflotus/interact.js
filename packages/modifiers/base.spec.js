import test from '@interactjs/_dev/test/test';
import * as helpers from '@interactjs/core/tests/_helpers';
import * as utils from '@interactjs/utils';
import modifiersBase from './base';
test('modifiers/base', (t) => {
    const scope = helpers.mockScope();
    modifiersBase.install(scope);
    scope.actions.eventTypes.push('teststart', 'testmove', 'testend');
    // eslint-disable-next-line new-cap
    const interaction = scope.interactions.new({});
    t.ok(utils.is.object(interaction.modifiers), 'modifiers prop is added new Interaction');
    const element = utils.win.window.document.documentElement;
    const interactable = scope.interactables.new(element);
    const startEvent = {
        pageX: 100,
        pageY: 200,
        clientX: 100,
        clientY: 200,
        target: element,
    };
    const moveEvent = {
        pageX: 400,
        pageY: 500,
        clientX: 400,
        clientY: 500,
        target: element,
    };
    const options = { target: { x: 100, y: 100 }, setStart: true };
    let firedEvents = [];
    interactable.rectChecker(() => ({ top: 0, left: 0, bottom: 50, right: 50 }));
    interactable.on('teststart testmove testend', (event) => firedEvents.push(event));
    interaction.pointerDown(startEvent, startEvent, element);
    interactable.options.test = {
        modifiers: [
            {
                options,
                methods: targetModifier,
            },
        ],
    };
    interaction.start({ name: 'test' }, interactable, element);
    t.ok(options.started, 'modifier methods.start() was called');
    t.ok(options.setted, 'modifier methods.set() was called');
    t.deepEqual(interaction.prevEvent.page, options.target, 'start event coords are modified');
    t.deepEqual(interaction.coords.start.page, { x: 100, y: 200 }, 'interaction.coords.start are restored after action start phase');
    t.deepEqual(interaction.coords.cur.page, { x: 100, y: 200 }, 'interaction.coords.cur are restored after action start phase');
    interaction.pointerMove(moveEvent, moveEvent, element);
    t.deepEqual(interaction.coords.cur.page, { x: moveEvent.pageX, y: moveEvent.pageY }, 'interaction.coords.cur are restored after action move phase');
    t.deepEqual(interaction.coords.start.page, { x: startEvent.pageX, y: startEvent.pageY }, 'interaction.coords.start are restored after action move phase');
    t.deepEqual({ x: interaction.prevEvent.x0, y: interaction.prevEvent.y0 }, { x: 100, y: 100 }, 'move event start coords are modified');
    firedEvents = [];
    const similarMoveEvent = { ...moveEvent, pageX: moveEvent.pageX + 0.5 };
    interaction.pointerMove(similarMoveEvent, similarMoveEvent, element);
    t.equal(firedEvents.length, 0, 'duplicate result coords are ignored');
    interaction.stop();
    t.ok(options.stopped, 'modifier methods.stop() was called');
    // don't set start
    options.setStart = null;
    // add second modifier
    interactable.options.test.modifiers.push({
        options,
        methods: doubleModifier,
    });
    interaction.pointerDown(startEvent, startEvent, element);
    interaction.start({ name: 'test' }, interactable, element);
    t.notOk(options.setted, 'modifier methods.set() was not called on start phase without options.setStart');
    t.deepEqual(interaction.prevEvent.page, { x: 100, y: 200 }, 'start event coords are not modified without options.setStart');
    t.deepEqual(interaction.coords.start.page, { x: 100, y: 200 }, 'interaction.coords.start are not modified without options.setStart');
    interaction.pointerMove(moveEvent, moveEvent, element);
    t.deepEqual(interaction.prevEvent.page, { x: 200, y: 200 }, 'move event coords are modified by all modifiers');
    // modifier options.type
    scope.modifiers.target = modifiersBase.makeModifier(targetModifier);
    options.type = 'target';
    options.started = false;
    interactable.options.test = {
        modifiers: [
            options,
        ],
    };
    interaction.stop();
    interaction.start({ name: 'test' }, interactable, element);
    t.ok(options.started, 'gets `scpe.modifiers[options.type]`');
    t.end();
});
const targetModifier = {
    start({ state }) {
        state.options.started = true;
    },
    set({ state, coords }) {
        const { target } = state.options;
        coords.x = target.x;
        coords.y = target.y;
        state.options.setted = true;
    },
    stop({ state }) {
        state.options.stopped = true;
        delete state.options.started;
        delete state.options.setted;
    },
};
const doubleModifier = {
    start() { },
    set({ coords }) {
        coords.x *= 2;
        coords.y *= 2;
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS5zcGVjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYmFzZS5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sSUFBSSxNQUFNLDRCQUE0QixDQUFBO0FBQzdDLE9BQU8sS0FBSyxPQUFPLE1BQU0saUNBQWlDLENBQUE7QUFDMUQsT0FBTyxLQUFLLEtBQUssTUFBTSxtQkFBbUIsQ0FBQTtBQUMxQyxPQUFPLGFBQWEsTUFBTSxRQUFRLENBQUE7QUFFbEMsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUU7SUFDM0IsTUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLFNBQVMsRUFBRSxDQUFBO0lBRWpDLGFBQWEsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUE7SUFDNUIsS0FBSyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxVQUFVLEVBQUUsU0FBUyxDQUFDLENBQUE7SUFFakUsbUNBQW1DO0lBQ25DLE1BQU0sV0FBVyxHQUFHLEtBQUssQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFBO0lBRTlDLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxFQUFFLHlDQUF5QyxDQUFDLENBQUE7SUFFdkYsTUFBTSxPQUFPLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQTtJQUN6RCxNQUFNLFlBQVksR0FBRyxLQUFLLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQTtJQUNyRCxNQUFNLFVBQVUsR0FBRztRQUNqQixLQUFLLEVBQUUsR0FBRztRQUNWLEtBQUssRUFBRSxHQUFHO1FBQ1YsT0FBTyxFQUFFLEdBQUc7UUFDWixPQUFPLEVBQUUsR0FBRztRQUNaLE1BQU0sRUFBRSxPQUFPO0tBQ2hCLENBQUE7SUFDRCxNQUFNLFNBQVMsR0FBRztRQUNoQixLQUFLLEVBQUUsR0FBRztRQUNWLEtBQUssRUFBRSxHQUFHO1FBQ1YsT0FBTyxFQUFFLEdBQUc7UUFDWixPQUFPLEVBQUUsR0FBRztRQUNaLE1BQU0sRUFBRSxPQUFPO0tBQ2hCLENBQUE7SUFDRCxNQUFNLE9BQU8sR0FBUSxFQUFFLE1BQU0sRUFBRSxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsQ0FBQTtJQUNuRSxJQUFJLFdBQVcsR0FBRyxFQUFFLENBQUE7SUFFcEIsWUFBWSxDQUFDLFdBQVcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQTtJQUM1RSxZQUFZLENBQUMsRUFBRSxDQUFDLDRCQUE0QixFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUE7SUFDakYsV0FBVyxDQUFDLFdBQVcsQ0FBQyxVQUFVLEVBQUUsVUFBVSxFQUFFLE9BQU8sQ0FBQyxDQUFBO0lBRXhELFlBQVksQ0FBQyxPQUFPLENBQUMsSUFBSSxHQUFHO1FBQzFCLFNBQVMsRUFBRTtZQUNUO2dCQUNFLE9BQU87Z0JBQ1AsT0FBTyxFQUFFLGNBQWM7YUFDeEI7U0FDRjtLQUNGLENBQUE7SUFFRCxXQUFXLENBQUMsS0FBSyxDQUFDLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxFQUFFLFlBQVksRUFBRSxPQUFPLENBQUMsQ0FBQTtJQUUxRCxDQUFDLENBQUMsRUFBRSxDQUNGLE9BQU8sQ0FBQyxPQUFPLEVBQ2YscUNBQXFDLENBQ3RDLENBQUE7SUFFRCxDQUFDLENBQUMsRUFBRSxDQUNGLE9BQU8sQ0FBQyxNQUFNLEVBQ2QsbUNBQW1DLENBQ3BDLENBQUE7SUFFRCxDQUFDLENBQUMsU0FBUyxDQUNULFdBQVcsQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUMxQixPQUFPLENBQUMsTUFBTSxFQUNkLGlDQUFpQyxDQUFDLENBQUE7SUFFcEMsQ0FBQyxDQUFDLFNBQVMsQ0FDVCxXQUFXLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQzdCLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLEVBQ2xCLGdFQUFnRSxDQUFDLENBQUE7SUFFbkUsQ0FBQyxDQUFDLFNBQVMsQ0FDVCxXQUFXLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQzNCLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLEVBQ2xCLDhEQUE4RCxDQUFDLENBQUE7SUFFakUsV0FBVyxDQUFDLFdBQVcsQ0FBQyxTQUFTLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBQyxDQUFBO0lBRXRELENBQUMsQ0FBQyxTQUFTLENBQ1QsV0FBVyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUMzQixFQUFFLENBQUMsRUFBRSxTQUFTLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxTQUFTLENBQUMsS0FBSyxFQUFFLEVBQzFDLDZEQUE2RCxDQUFDLENBQUE7SUFFaEUsQ0FBQyxDQUFDLFNBQVMsQ0FDVCxXQUFXLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQzdCLEVBQUUsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxLQUFLLEVBQUUsRUFDNUMsK0RBQStELENBQUMsQ0FBQTtJQUVsRSxDQUFDLENBQUMsU0FBUyxDQUNULEVBQUUsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxTQUFTLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxXQUFXLENBQUMsU0FBUyxDQUFDLEVBQUUsRUFBRSxFQUM1RCxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxFQUNsQixzQ0FBc0MsQ0FBQyxDQUFBO0lBRXpDLFdBQVcsR0FBRyxFQUFFLENBQUE7SUFDaEIsTUFBTSxnQkFBZ0IsR0FBRyxFQUFFLEdBQUcsU0FBUyxFQUFFLEtBQUssRUFBRSxTQUFTLENBQUMsS0FBSyxHQUFHLEdBQUcsRUFBRSxDQUFBO0lBQ3ZFLFdBQVcsQ0FBQyxXQUFXLENBQUMsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsT0FBTyxDQUFDLENBQUE7SUFDcEUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxxQ0FBcUMsQ0FBQyxDQUFBO0lBRXJFLFdBQVcsQ0FBQyxJQUFJLEVBQUUsQ0FBQTtJQUVsQixDQUFDLENBQUMsRUFBRSxDQUNGLE9BQU8sQ0FBQyxPQUFPLEVBQ2Ysb0NBQW9DLENBQ3JDLENBQUE7SUFFRCxrQkFBa0I7SUFDbEIsT0FBTyxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUE7SUFDdkIsc0JBQXNCO0lBQ3RCLFlBQVksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUM7UUFDdkMsT0FBTztRQUNQLE9BQU8sRUFBRSxjQUFjO0tBQ3hCLENBQUMsQ0FBQTtJQUVGLFdBQVcsQ0FBQyxXQUFXLENBQUMsVUFBVSxFQUFFLFVBQVUsRUFBRSxPQUFPLENBQUMsQ0FBQTtJQUN4RCxXQUFXLENBQUMsS0FBSyxDQUFDLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxFQUFFLFlBQVksRUFBRSxPQUFPLENBQUMsQ0FBQTtJQUUxRCxDQUFDLENBQUMsS0FBSyxDQUNMLE9BQU8sQ0FBQyxNQUFNLEVBQ2QsK0VBQStFLENBQ2hGLENBQUE7SUFFRCxDQUFDLENBQUMsU0FBUyxDQUNULFdBQVcsQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUMxQixFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxFQUNsQiw4REFBOEQsQ0FBQyxDQUFBO0lBRWpFLENBQUMsQ0FBQyxTQUFTLENBQ1QsV0FBVyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUM3QixFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxFQUNsQixvRUFBb0UsQ0FBQyxDQUFBO0lBRXZFLFdBQVcsQ0FBQyxXQUFXLENBQUMsU0FBUyxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQUMsQ0FBQTtJQUV0RCxDQUFDLENBQUMsU0FBUyxDQUNULFdBQVcsQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUMxQixFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxFQUNsQixpREFBaUQsQ0FBQyxDQUFBO0lBRXBELHdCQUF3QjtJQUN4QixLQUFLLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxhQUFhLENBQUMsWUFBWSxDQUFDLGNBQWMsQ0FBQyxDQUFBO0lBQ25FLE9BQU8sQ0FBQyxJQUFJLEdBQUcsUUFBUSxDQUFBO0lBQ3ZCLE9BQU8sQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFBO0lBQ3ZCLFlBQVksQ0FBQyxPQUFPLENBQUMsSUFBSSxHQUFHO1FBQzFCLFNBQVMsRUFBRTtZQUNULE9BQU87U0FDUjtLQUNGLENBQUE7SUFDRCxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUE7SUFDbEIsV0FBVyxDQUFDLEtBQUssQ0FBQyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsRUFBRSxZQUFZLEVBQUUsT0FBTyxDQUFDLENBQUE7SUFFMUQsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLHFDQUFxQyxDQUFDLENBQUE7SUFFNUQsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFBO0FBQ1QsQ0FBQyxDQUFDLENBQUE7QUFFRixNQUFNLGNBQWMsR0FBRztJQUNyQixLQUFLLENBQUUsRUFBRSxLQUFLLEVBQUU7UUFDZCxLQUFLLENBQUMsT0FBTyxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUE7SUFDOUIsQ0FBQztJQUNELEdBQUcsQ0FBRSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUU7UUFDcEIsTUFBTSxFQUFFLE1BQU0sRUFBRSxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUE7UUFFaEMsTUFBTSxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFBO1FBQ25CLE1BQU0sQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQTtRQUVuQixLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUE7SUFDN0IsQ0FBQztJQUNELElBQUksQ0FBRSxFQUFFLEtBQUssRUFBRTtRQUNiLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQTtRQUM1QixPQUFPLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFBO1FBQzVCLE9BQU8sS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUE7SUFDN0IsQ0FBQztDQUNGLENBQUE7QUFFRCxNQUFNLGNBQWMsR0FBRztJQUNyQixLQUFLLEtBQUssQ0FBQztJQUNYLEdBQUcsQ0FBRSxFQUFFLE1BQU0sRUFBRTtRQUNiLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFBO1FBQ2IsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDZixDQUFDO0NBQ0YsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0ZXN0IGZyb20gJ0BpbnRlcmFjdGpzL19kZXYvdGVzdC90ZXN0J1xuaW1wb3J0ICogYXMgaGVscGVycyBmcm9tICdAaW50ZXJhY3Rqcy9jb3JlL3Rlc3RzL19oZWxwZXJzJ1xuaW1wb3J0ICogYXMgdXRpbHMgZnJvbSAnQGludGVyYWN0anMvdXRpbHMnXG5pbXBvcnQgbW9kaWZpZXJzQmFzZSBmcm9tICcuL2Jhc2UnXG5cbnRlc3QoJ21vZGlmaWVycy9iYXNlJywgKHQpID0+IHtcbiAgY29uc3Qgc2NvcGUgPSBoZWxwZXJzLm1vY2tTY29wZSgpXG5cbiAgbW9kaWZpZXJzQmFzZS5pbnN0YWxsKHNjb3BlKVxuICBzY29wZS5hY3Rpb25zLmV2ZW50VHlwZXMucHVzaCgndGVzdHN0YXJ0JywgJ3Rlc3Rtb3ZlJywgJ3Rlc3RlbmQnKVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuZXctY2FwXG4gIGNvbnN0IGludGVyYWN0aW9uID0gc2NvcGUuaW50ZXJhY3Rpb25zLm5ldyh7fSlcblxuICB0Lm9rKHV0aWxzLmlzLm9iamVjdChpbnRlcmFjdGlvbi5tb2RpZmllcnMpLCAnbW9kaWZpZXJzIHByb3AgaXMgYWRkZWQgbmV3IEludGVyYWN0aW9uJylcblxuICBjb25zdCBlbGVtZW50ID0gdXRpbHMud2luLndpbmRvdy5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnRcbiAgY29uc3QgaW50ZXJhY3RhYmxlID0gc2NvcGUuaW50ZXJhY3RhYmxlcy5uZXcoZWxlbWVudClcbiAgY29uc3Qgc3RhcnRFdmVudCA9IHtcbiAgICBwYWdlWDogMTAwLFxuICAgIHBhZ2VZOiAyMDAsXG4gICAgY2xpZW50WDogMTAwLFxuICAgIGNsaWVudFk6IDIwMCxcbiAgICB0YXJnZXQ6IGVsZW1lbnQsXG4gIH1cbiAgY29uc3QgbW92ZUV2ZW50ID0ge1xuICAgIHBhZ2VYOiA0MDAsXG4gICAgcGFnZVk6IDUwMCxcbiAgICBjbGllbnRYOiA0MDAsXG4gICAgY2xpZW50WTogNTAwLFxuICAgIHRhcmdldDogZWxlbWVudCxcbiAgfVxuICBjb25zdCBvcHRpb25zOiBhbnkgPSB7IHRhcmdldDogeyB4OiAxMDAsIHk6IDEwMCB9LCBzZXRTdGFydDogdHJ1ZSB9XG4gIGxldCBmaXJlZEV2ZW50cyA9IFtdXG5cbiAgaW50ZXJhY3RhYmxlLnJlY3RDaGVja2VyKCgpID0+ICh7IHRvcDogMCwgbGVmdDogMCwgYm90dG9tOiA1MCwgcmlnaHQ6IDUwIH0pKVxuICBpbnRlcmFjdGFibGUub24oJ3Rlc3RzdGFydCB0ZXN0bW92ZSB0ZXN0ZW5kJywgKGV2ZW50KSA9PiBmaXJlZEV2ZW50cy5wdXNoKGV2ZW50KSlcbiAgaW50ZXJhY3Rpb24ucG9pbnRlckRvd24oc3RhcnRFdmVudCwgc3RhcnRFdmVudCwgZWxlbWVudClcblxuICBpbnRlcmFjdGFibGUub3B0aW9ucy50ZXN0ID0ge1xuICAgIG1vZGlmaWVyczogW1xuICAgICAge1xuICAgICAgICBvcHRpb25zLFxuICAgICAgICBtZXRob2RzOiB0YXJnZXRNb2RpZmllcixcbiAgICAgIH0sXG4gICAgXSxcbiAgfVxuXG4gIGludGVyYWN0aW9uLnN0YXJ0KHsgbmFtZTogJ3Rlc3QnIH0sIGludGVyYWN0YWJsZSwgZWxlbWVudClcblxuICB0Lm9rKFxuICAgIG9wdGlvbnMuc3RhcnRlZCxcbiAgICAnbW9kaWZpZXIgbWV0aG9kcy5zdGFydCgpIHdhcyBjYWxsZWQnLFxuICApXG5cbiAgdC5vayhcbiAgICBvcHRpb25zLnNldHRlZCxcbiAgICAnbW9kaWZpZXIgbWV0aG9kcy5zZXQoKSB3YXMgY2FsbGVkJyxcbiAgKVxuXG4gIHQuZGVlcEVxdWFsKFxuICAgIGludGVyYWN0aW9uLnByZXZFdmVudC5wYWdlLFxuICAgIG9wdGlvbnMudGFyZ2V0LFxuICAgICdzdGFydCBldmVudCBjb29yZHMgYXJlIG1vZGlmaWVkJylcblxuICB0LmRlZXBFcXVhbChcbiAgICBpbnRlcmFjdGlvbi5jb29yZHMuc3RhcnQucGFnZSxcbiAgICB7IHg6IDEwMCwgeTogMjAwIH0sXG4gICAgJ2ludGVyYWN0aW9uLmNvb3Jkcy5zdGFydCBhcmUgcmVzdG9yZWQgYWZ0ZXIgYWN0aW9uIHN0YXJ0IHBoYXNlJylcblxuICB0LmRlZXBFcXVhbChcbiAgICBpbnRlcmFjdGlvbi5jb29yZHMuY3VyLnBhZ2UsXG4gICAgeyB4OiAxMDAsIHk6IDIwMCB9LFxuICAgICdpbnRlcmFjdGlvbi5jb29yZHMuY3VyIGFyZSByZXN0b3JlZCBhZnRlciBhY3Rpb24gc3RhcnQgcGhhc2UnKVxuXG4gIGludGVyYWN0aW9uLnBvaW50ZXJNb3ZlKG1vdmVFdmVudCwgbW92ZUV2ZW50LCBlbGVtZW50KVxuXG4gIHQuZGVlcEVxdWFsKFxuICAgIGludGVyYWN0aW9uLmNvb3Jkcy5jdXIucGFnZSxcbiAgICB7IHg6IG1vdmVFdmVudC5wYWdlWCwgeTogbW92ZUV2ZW50LnBhZ2VZIH0sXG4gICAgJ2ludGVyYWN0aW9uLmNvb3Jkcy5jdXIgYXJlIHJlc3RvcmVkIGFmdGVyIGFjdGlvbiBtb3ZlIHBoYXNlJylcblxuICB0LmRlZXBFcXVhbChcbiAgICBpbnRlcmFjdGlvbi5jb29yZHMuc3RhcnQucGFnZSxcbiAgICB7IHg6IHN0YXJ0RXZlbnQucGFnZVgsIHk6IHN0YXJ0RXZlbnQucGFnZVkgfSxcbiAgICAnaW50ZXJhY3Rpb24uY29vcmRzLnN0YXJ0IGFyZSByZXN0b3JlZCBhZnRlciBhY3Rpb24gbW92ZSBwaGFzZScpXG5cbiAgdC5kZWVwRXF1YWwoXG4gICAgeyB4OiBpbnRlcmFjdGlvbi5wcmV2RXZlbnQueDAsIHk6IGludGVyYWN0aW9uLnByZXZFdmVudC55MCB9LFxuICAgIHsgeDogMTAwLCB5OiAxMDAgfSxcbiAgICAnbW92ZSBldmVudCBzdGFydCBjb29yZHMgYXJlIG1vZGlmaWVkJylcblxuICBmaXJlZEV2ZW50cyA9IFtdXG4gIGNvbnN0IHNpbWlsYXJNb3ZlRXZlbnQgPSB7IC4uLm1vdmVFdmVudCwgcGFnZVg6IG1vdmVFdmVudC5wYWdlWCArIDAuNSB9XG4gIGludGVyYWN0aW9uLnBvaW50ZXJNb3ZlKHNpbWlsYXJNb3ZlRXZlbnQsIHNpbWlsYXJNb3ZlRXZlbnQsIGVsZW1lbnQpXG4gIHQuZXF1YWwoZmlyZWRFdmVudHMubGVuZ3RoLCAwLCAnZHVwbGljYXRlIHJlc3VsdCBjb29yZHMgYXJlIGlnbm9yZWQnKVxuXG4gIGludGVyYWN0aW9uLnN0b3AoKVxuXG4gIHQub2soXG4gICAgb3B0aW9ucy5zdG9wcGVkLFxuICAgICdtb2RpZmllciBtZXRob2RzLnN0b3AoKSB3YXMgY2FsbGVkJyxcbiAgKVxuXG4gIC8vIGRvbid0IHNldCBzdGFydFxuICBvcHRpb25zLnNldFN0YXJ0ID0gbnVsbFxuICAvLyBhZGQgc2Vjb25kIG1vZGlmaWVyXG4gIGludGVyYWN0YWJsZS5vcHRpb25zLnRlc3QubW9kaWZpZXJzLnB1c2goe1xuICAgIG9wdGlvbnMsXG4gICAgbWV0aG9kczogZG91YmxlTW9kaWZpZXIsXG4gIH0pXG5cbiAgaW50ZXJhY3Rpb24ucG9pbnRlckRvd24oc3RhcnRFdmVudCwgc3RhcnRFdmVudCwgZWxlbWVudClcbiAgaW50ZXJhY3Rpb24uc3RhcnQoeyBuYW1lOiAndGVzdCcgfSwgaW50ZXJhY3RhYmxlLCBlbGVtZW50KVxuXG4gIHQubm90T2soXG4gICAgb3B0aW9ucy5zZXR0ZWQsXG4gICAgJ21vZGlmaWVyIG1ldGhvZHMuc2V0KCkgd2FzIG5vdCBjYWxsZWQgb24gc3RhcnQgcGhhc2Ugd2l0aG91dCBvcHRpb25zLnNldFN0YXJ0JyxcbiAgKVxuXG4gIHQuZGVlcEVxdWFsKFxuICAgIGludGVyYWN0aW9uLnByZXZFdmVudC5wYWdlLFxuICAgIHsgeDogMTAwLCB5OiAyMDAgfSxcbiAgICAnc3RhcnQgZXZlbnQgY29vcmRzIGFyZSBub3QgbW9kaWZpZWQgd2l0aG91dCBvcHRpb25zLnNldFN0YXJ0JylcblxuICB0LmRlZXBFcXVhbChcbiAgICBpbnRlcmFjdGlvbi5jb29yZHMuc3RhcnQucGFnZSxcbiAgICB7IHg6IDEwMCwgeTogMjAwIH0sXG4gICAgJ2ludGVyYWN0aW9uLmNvb3Jkcy5zdGFydCBhcmUgbm90IG1vZGlmaWVkIHdpdGhvdXQgb3B0aW9ucy5zZXRTdGFydCcpXG5cbiAgaW50ZXJhY3Rpb24ucG9pbnRlck1vdmUobW92ZUV2ZW50LCBtb3ZlRXZlbnQsIGVsZW1lbnQpXG5cbiAgdC5kZWVwRXF1YWwoXG4gICAgaW50ZXJhY3Rpb24ucHJldkV2ZW50LnBhZ2UsXG4gICAgeyB4OiAyMDAsIHk6IDIwMCB9LFxuICAgICdtb3ZlIGV2ZW50IGNvb3JkcyBhcmUgbW9kaWZpZWQgYnkgYWxsIG1vZGlmaWVycycpXG5cbiAgLy8gbW9kaWZpZXIgb3B0aW9ucy50eXBlXG4gIHNjb3BlLm1vZGlmaWVycy50YXJnZXQgPSBtb2RpZmllcnNCYXNlLm1ha2VNb2RpZmllcih0YXJnZXRNb2RpZmllcilcbiAgb3B0aW9ucy50eXBlID0gJ3RhcmdldCdcbiAgb3B0aW9ucy5zdGFydGVkID0gZmFsc2VcbiAgaW50ZXJhY3RhYmxlLm9wdGlvbnMudGVzdCA9IHtcbiAgICBtb2RpZmllcnM6IFtcbiAgICAgIG9wdGlvbnMsXG4gICAgXSxcbiAgfVxuICBpbnRlcmFjdGlvbi5zdG9wKClcbiAgaW50ZXJhY3Rpb24uc3RhcnQoeyBuYW1lOiAndGVzdCcgfSwgaW50ZXJhY3RhYmxlLCBlbGVtZW50KVxuXG4gIHQub2sob3B0aW9ucy5zdGFydGVkLCAnZ2V0cyBgc2NwZS5tb2RpZmllcnNbb3B0aW9ucy50eXBlXWAnKVxuXG4gIHQuZW5kKClcbn0pXG5cbmNvbnN0IHRhcmdldE1vZGlmaWVyID0ge1xuICBzdGFydCAoeyBzdGF0ZSB9KSB7XG4gICAgc3RhdGUub3B0aW9ucy5zdGFydGVkID0gdHJ1ZVxuICB9LFxuICBzZXQgKHsgc3RhdGUsIGNvb3JkcyB9KSB7XG4gICAgY29uc3QgeyB0YXJnZXQgfSA9IHN0YXRlLm9wdGlvbnNcblxuICAgIGNvb3Jkcy54ID0gdGFyZ2V0LnhcbiAgICBjb29yZHMueSA9IHRhcmdldC55XG5cbiAgICBzdGF0ZS5vcHRpb25zLnNldHRlZCA9IHRydWVcbiAgfSxcbiAgc3RvcCAoeyBzdGF0ZSB9KSB7XG4gICAgc3RhdGUub3B0aW9ucy5zdG9wcGVkID0gdHJ1ZVxuICAgIGRlbGV0ZSBzdGF0ZS5vcHRpb25zLnN0YXJ0ZWRcbiAgICBkZWxldGUgc3RhdGUub3B0aW9ucy5zZXR0ZWRcbiAgfSxcbn1cblxuY29uc3QgZG91YmxlTW9kaWZpZXIgPSB7XG4gIHN0YXJ0ICgpIHt9LFxuICBzZXQgKHsgY29vcmRzIH0pIHtcbiAgICBjb29yZHMueCAqPSAyXG4gICAgY29vcmRzLnkgKj0gMlxuICB9LFxufVxuIl19