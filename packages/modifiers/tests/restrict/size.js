import test from '@interactjs/_dev/test/test';
import { mockSignals } from '@interactjs/core/tests/helpers';
import rectUtils from '@interactjs/utils/rect';
import Interaction from '@interactjs/core/Interaction';
import base from '../../base';
import restrictSize from '../../restrict/size';
test('restrictSize', t => {
    const edges = { left: true, top: true };
    const rect = { left: 0, top: 0, right: 200, bottom: 300 };
    const interaction = new Interaction({ signals: mockSignals() });
    interaction.prepared = { name: null };
    interaction.prepared.edges = edges;
    interaction.resizeRects = {};
    interaction.resizeRects.inverted = rectUtils.xywhToTlbr(rect);
    interaction.modifiers = {};
    interaction._interacting = true;
    const options = {
        min: { width: 60, height: 50 },
        max: { width: 300, height: 350 },
    };
    const startCoords = Object.freeze({ x: 0, y: 0 });
    const offset = { top: 0, bottom: 0, left: 0, right: 0 };
    const state = {
        options,
        offset,
        methods: restrictSize,
    };
    const arg = {
        interaction,
        states: [state],
        coords: startCoords,
        pageCoords: startCoords,
        options,
        state: null,
    };
    interaction.modifiers.startOffset = base.getRectOffset(rect, startCoords);
    base.startAll(arg);
    arg.state = state;
    const move1 = Object.freeze({ x: -50, y: -40 });
    arg.coords = { ...move1 };
    restrictSize.set(arg);
    t.deepEqual(arg.coords, move1, 'within both min and max');
    const move2 = Object.freeze({ x: -200, y: -300 });
    arg.coords = { ...move2 };
    restrictSize.set(arg);
    t.deepEqual(arg.coords, { x: -100, y: -50 }, 'outside max');
    const move3 = Object.freeze({ x: 250, y: 320 });
    arg.coords = { ...move3 };
    restrictSize.set(arg);
    t.deepEqual(arg.coords, { x: 140, y: 250 }, 'outside min');
    t.end();
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2l6ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInNpemUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxJQUFJLE1BQU0sNEJBQTRCLENBQUE7QUFDN0MsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdDQUFnQyxDQUFBO0FBRTVELE9BQU8sU0FBUyxNQUFNLHdCQUF3QixDQUFBO0FBQzlDLE9BQU8sV0FBVyxNQUFNLDhCQUE4QixDQUFBO0FBQ3RELE9BQU8sSUFBSSxNQUFNLFlBQVksQ0FBQTtBQUM3QixPQUFPLFlBQVksTUFBTSxxQkFBcUIsQ0FBQTtBQUU5QyxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUMsQ0FBQyxFQUFFO0lBQ3ZCLE1BQU0sS0FBSyxHQUFHLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLENBQUE7SUFDdkMsTUFBTSxJQUFJLEdBQUcsRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLENBQUE7SUFDekQsTUFBTSxXQUFXLEdBQUcsSUFBSSxXQUFXLENBQUMsRUFBRSxPQUFPLEVBQUUsV0FBVyxFQUFFLEVBQVMsQ0FBQyxDQUFBO0lBRXRFLFdBQVcsQ0FBQyxRQUFRLEdBQUcsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLENBQUE7SUFDckMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFBO0lBQ2xDLFdBQVcsQ0FBQyxXQUFXLEdBQUcsRUFBUyxDQUFBO0lBQ25DLFdBQVcsQ0FBQyxXQUFXLENBQUMsUUFBUSxHQUFHLFNBQVMsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDN0QsV0FBVyxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUE7SUFDMUIsV0FBVyxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUE7SUFFL0IsTUFBTSxPQUFPLEdBQUc7UUFDZCxHQUFHLEVBQUUsRUFBRSxLQUFLLEVBQUcsRUFBRSxFQUFFLE1BQU0sRUFBRyxFQUFFLEVBQUU7UUFDaEMsR0FBRyxFQUFFLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFO0tBQ2pDLENBQUE7SUFDRCxNQUFNLFdBQVcsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUNqRCxNQUFNLE1BQU0sR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsQ0FBQTtJQUN2RCxNQUFNLEtBQUssR0FBRztRQUNaLE9BQU87UUFDUCxNQUFNO1FBQ04sT0FBTyxFQUFFLFlBQVk7S0FDdEIsQ0FBQTtJQUNELE1BQU0sR0FBRyxHQUFHO1FBQ1YsV0FBVztRQUNYLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNmLE1BQU0sRUFBRSxXQUFXO1FBQ25CLFVBQVUsRUFBRSxXQUFXO1FBQ3ZCLE9BQU87UUFDUCxLQUFLLEVBQUUsSUFBSTtLQUNaLENBQUE7SUFFRCxXQUFXLENBQUMsU0FBUyxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksRUFBRSxXQUFXLENBQUMsQ0FBQTtJQUN6RSxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFBO0lBQ2xCLEdBQUcsQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFBO0lBRWpCLE1BQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQTtJQUMvQyxHQUFHLENBQUMsTUFBTSxHQUFHLEVBQUUsR0FBRyxLQUFLLEVBQUUsQ0FBQTtJQUN6QixZQUFZLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFBO0lBRXJCLENBQUMsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUseUJBQXlCLENBQUMsQ0FBQTtJQUV6RCxNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUE7SUFDakQsR0FBRyxDQUFDLE1BQU0sR0FBRyxFQUFFLEdBQUcsS0FBSyxFQUFFLENBQUE7SUFDekIsWUFBWSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQTtJQUVyQixDQUFDLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsYUFBYSxDQUFDLENBQUE7SUFFM0QsTUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUE7SUFDL0MsR0FBRyxDQUFDLE1BQU0sR0FBRyxFQUFFLEdBQUcsS0FBSyxFQUFFLENBQUE7SUFDekIsWUFBWSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQTtJQUVyQixDQUFDLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsRUFBRSxhQUFhLENBQUMsQ0FBQTtJQUUxRCxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUE7QUFDVCxDQUFDLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0ZXN0IGZyb20gJ0BpbnRlcmFjdGpzL19kZXYvdGVzdC90ZXN0J1xuaW1wb3J0IHsgbW9ja1NpZ25hbHMgfSBmcm9tICdAaW50ZXJhY3Rqcy9jb3JlL3Rlc3RzL2hlbHBlcnMnXG5cbmltcG9ydCByZWN0VXRpbHMgZnJvbSAnQGludGVyYWN0anMvdXRpbHMvcmVjdCdcbmltcG9ydCBJbnRlcmFjdGlvbiBmcm9tICdAaW50ZXJhY3Rqcy9jb3JlL0ludGVyYWN0aW9uJ1xuaW1wb3J0IGJhc2UgZnJvbSAnLi4vLi4vYmFzZSdcbmltcG9ydCByZXN0cmljdFNpemUgZnJvbSAnLi4vLi4vcmVzdHJpY3Qvc2l6ZSdcblxudGVzdCgncmVzdHJpY3RTaXplJywgdCA9PiB7XG4gIGNvbnN0IGVkZ2VzID0geyBsZWZ0OiB0cnVlLCB0b3A6IHRydWUgfVxuICBjb25zdCByZWN0ID0geyBsZWZ0OiAwLCB0b3A6IDAsIHJpZ2h0OiAyMDAsIGJvdHRvbTogMzAwIH1cbiAgY29uc3QgaW50ZXJhY3Rpb24gPSBuZXcgSW50ZXJhY3Rpb24oeyBzaWduYWxzOiBtb2NrU2lnbmFscygpIH0gYXMgYW55KVxuXG4gIGludGVyYWN0aW9uLnByZXBhcmVkID0geyBuYW1lOiBudWxsIH1cbiAgaW50ZXJhY3Rpb24ucHJlcGFyZWQuZWRnZXMgPSBlZGdlc1xuICBpbnRlcmFjdGlvbi5yZXNpemVSZWN0cyA9IHt9IGFzIGFueVxuICBpbnRlcmFjdGlvbi5yZXNpemVSZWN0cy5pbnZlcnRlZCA9IHJlY3RVdGlscy54eXdoVG9UbGJyKHJlY3QpXG4gIGludGVyYWN0aW9uLm1vZGlmaWVycyA9IHt9XG4gIGludGVyYWN0aW9uLl9pbnRlcmFjdGluZyA9IHRydWVcblxuICBjb25zdCBvcHRpb25zID0ge1xuICAgIG1pbjogeyB3aWR0aDogIDYwLCBoZWlnaHQ6ICA1MCB9LFxuICAgIG1heDogeyB3aWR0aDogMzAwLCBoZWlnaHQ6IDM1MCB9LFxuICB9XG4gIGNvbnN0IHN0YXJ0Q29vcmRzID0gT2JqZWN0LmZyZWV6ZSh7IHg6IDAsIHk6IDAgfSlcbiAgY29uc3Qgb2Zmc2V0ID0geyB0b3A6IDAsIGJvdHRvbTogMCwgbGVmdDogMCwgcmlnaHQ6IDAgfVxuICBjb25zdCBzdGF0ZSA9IHtcbiAgICBvcHRpb25zLFxuICAgIG9mZnNldCxcbiAgICBtZXRob2RzOiByZXN0cmljdFNpemUsXG4gIH1cbiAgY29uc3QgYXJnID0ge1xuICAgIGludGVyYWN0aW9uLFxuICAgIHN0YXRlczogW3N0YXRlXSxcbiAgICBjb29yZHM6IHN0YXJ0Q29vcmRzLFxuICAgIHBhZ2VDb29yZHM6IHN0YXJ0Q29vcmRzLFxuICAgIG9wdGlvbnMsXG4gICAgc3RhdGU6IG51bGwsXG4gIH1cblxuICBpbnRlcmFjdGlvbi5tb2RpZmllcnMuc3RhcnRPZmZzZXQgPSBiYXNlLmdldFJlY3RPZmZzZXQocmVjdCwgc3RhcnRDb29yZHMpXG4gIGJhc2Uuc3RhcnRBbGwoYXJnKVxuICBhcmcuc3RhdGUgPSBzdGF0ZVxuXG4gIGNvbnN0IG1vdmUxID0gT2JqZWN0LmZyZWV6ZSh7IHg6IC01MCwgeTogLTQwIH0pXG4gIGFyZy5jb29yZHMgPSB7IC4uLm1vdmUxIH1cbiAgcmVzdHJpY3RTaXplLnNldChhcmcpXG5cbiAgdC5kZWVwRXF1YWwoYXJnLmNvb3JkcywgbW92ZTEsICd3aXRoaW4gYm90aCBtaW4gYW5kIG1heCcpXG5cbiAgY29uc3QgbW92ZTIgPSBPYmplY3QuZnJlZXplKHsgeDogLTIwMCwgeTogLTMwMCB9KVxuICBhcmcuY29vcmRzID0geyAuLi5tb3ZlMiB9XG4gIHJlc3RyaWN0U2l6ZS5zZXQoYXJnKVxuXG4gIHQuZGVlcEVxdWFsKGFyZy5jb29yZHMsIHsgeDogLTEwMCwgeTogLTUwIH0sICdvdXRzaWRlIG1heCcpXG5cbiAgY29uc3QgbW92ZTMgPSBPYmplY3QuZnJlZXplKHsgeDogMjUwLCB5OiAzMjAgfSlcbiAgYXJnLmNvb3JkcyA9IHsgLi4ubW92ZTMgfVxuICByZXN0cmljdFNpemUuc2V0KGFyZylcblxuICB0LmRlZXBFcXVhbChhcmcuY29vcmRzLCB7IHg6IDE0MCwgeTogMjUwIH0sICdvdXRzaWRlIG1pbicpXG5cbiAgdC5lbmQoKVxufSlcbiJdfQ==