import test from '@interactjs/_dev/test/test';
import { mockSignals, mockInteractable } from '@interactjs/core/tests/helpers';
import Interaction from '@interactjs/core/Interaction';
import snapSize from '../../snap/size';
test('modifiers/snapSize', t => {
    const interaction = new Interaction({ signals: mockSignals() });
    interaction.target = mockInteractable();
    interaction.target.getRect = () => ({ top: 0, left: 0, bottom: 100, right: 100 });
    interaction.prepared = {
        name: null,
        edges: { top: true, left: true, bottom: false, right: false },
    };
    interaction._interacting = true;
    const target0 = Object.freeze({ x: 50, y: 100 });
    const options = {
        targets: [
            { ...target0 },
        ],
        range: Infinity,
    };
    const state = {
        options,
        delta: { x: 0, y: 0 },
        offset: [{ x: 0, y: 0 }],
    };
    const pageCoords = Object.freeze({ x: 10, y: 20 });
    const arg = {
        interaction,
        interactable: interaction.target,
        state,
        pageCoords,
        coords: { ...pageCoords },
    };
    snapSize.start(arg);
    snapSize.set(arg);
    t.deepEqual(arg.coords, target0, 'snapSize.set single target, zereo offset');
    t.end();
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2l6ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInNpemUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxJQUFJLE1BQU0sNEJBQTRCLENBQUE7QUFDN0MsT0FBTyxFQUFFLFdBQVcsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGdDQUFnQyxDQUFBO0FBQzlFLE9BQU8sV0FBVyxNQUFNLDhCQUE4QixDQUFBO0FBQ3RELE9BQU8sUUFBUSxNQUFNLGlCQUFpQixDQUFBO0FBRXRDLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxDQUFDLENBQUMsRUFBRTtJQUM3QixNQUFNLFdBQVcsR0FBRyxJQUFJLFdBQVcsQ0FBQyxFQUFFLE9BQU8sRUFBRSxXQUFXLEVBQUUsRUFBUyxDQUFDLENBQUE7SUFDdEUsV0FBVyxDQUFDLE1BQU0sR0FBRyxnQkFBZ0IsRUFBRSxDQUFBO0lBQ3ZDLFdBQVcsQ0FBQyxNQUFNLENBQUMsT0FBTyxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFVLENBQUEsQ0FBQTtJQUN4RixXQUFXLENBQUMsUUFBUSxHQUFHO1FBQ3JCLElBQUksRUFBRSxJQUFJO1FBQ1YsS0FBSyxFQUFFLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRTtLQUM5RCxDQUFBO0lBQ0QsV0FBVyxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUE7SUFFL0IsTUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBRyxFQUFFLEVBQUUsQ0FBQyxFQUFHLEdBQUcsRUFBRSxDQUFDLENBQUE7SUFDbEQsTUFBTSxPQUFPLEdBQUc7UUFDZCxPQUFPLEVBQUU7WUFDUCxFQUFFLEdBQUcsT0FBTyxFQUFFO1NBQ2Y7UUFDRCxLQUFLLEVBQUUsUUFBUTtLQUNoQixDQUFBO0lBQ0QsTUFBTSxLQUFLLEdBQUc7UUFDWixPQUFPO1FBQ1AsS0FBSyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFO1FBQ3JCLE1BQU0sRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7S0FDekIsQ0FBQTtJQUNELE1BQU0sVUFBVSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFBO0lBQ2xELE1BQU0sR0FBRyxHQUFHO1FBQ1YsV0FBVztRQUNYLFlBQVksRUFBRSxXQUFXLENBQUMsTUFBTTtRQUNoQyxLQUFLO1FBQ0wsVUFBVTtRQUNWLE1BQU0sRUFBRSxFQUFFLEdBQUcsVUFBVSxFQUFFO0tBQzFCLENBQUE7SUFFRCxRQUFRLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFBO0lBQ25CLFFBQVEsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUE7SUFFakIsQ0FBQyxDQUFDLFNBQVMsQ0FDVCxHQUFHLENBQUMsTUFBTSxFQUNWLE9BQU8sRUFDUCwwQ0FBMEMsQ0FDM0MsQ0FBQTtJQUVELENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQTtBQUNULENBQUMsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHRlc3QgZnJvbSAnQGludGVyYWN0anMvX2Rldi90ZXN0L3Rlc3QnXG5pbXBvcnQgeyBtb2NrU2lnbmFscywgbW9ja0ludGVyYWN0YWJsZSB9IGZyb20gJ0BpbnRlcmFjdGpzL2NvcmUvdGVzdHMvaGVscGVycydcbmltcG9ydCBJbnRlcmFjdGlvbiBmcm9tICdAaW50ZXJhY3Rqcy9jb3JlL0ludGVyYWN0aW9uJ1xuaW1wb3J0IHNuYXBTaXplIGZyb20gJy4uLy4uL3NuYXAvc2l6ZSdcblxudGVzdCgnbW9kaWZpZXJzL3NuYXBTaXplJywgdCA9PiB7XG4gIGNvbnN0IGludGVyYWN0aW9uID0gbmV3IEludGVyYWN0aW9uKHsgc2lnbmFsczogbW9ja1NpZ25hbHMoKSB9IGFzIGFueSlcbiAgaW50ZXJhY3Rpb24udGFyZ2V0ID0gbW9ja0ludGVyYWN0YWJsZSgpXG4gIGludGVyYWN0aW9uLnRhcmdldC5nZXRSZWN0ID0gKCkgPT4gKHsgdG9wOiAwLCBsZWZ0OiAwLCBib3R0b206IDEwMCwgcmlnaHQ6IDEwMCB9IGFzIGFueSlcbiAgaW50ZXJhY3Rpb24ucHJlcGFyZWQgPSB7XG4gICAgbmFtZTogbnVsbCxcbiAgICBlZGdlczogeyB0b3A6IHRydWUsIGxlZnQ6IHRydWUsIGJvdHRvbTogZmFsc2UsIHJpZ2h0OiBmYWxzZSB9LFxuICB9XG4gIGludGVyYWN0aW9uLl9pbnRlcmFjdGluZyA9IHRydWVcblxuICBjb25zdCB0YXJnZXQwID0gT2JqZWN0LmZyZWV6ZSh7IHg6ICA1MCwgeTogIDEwMCB9KVxuICBjb25zdCBvcHRpb25zID0ge1xuICAgIHRhcmdldHM6IFtcbiAgICAgIHsgLi4udGFyZ2V0MCB9LFxuICAgIF0sXG4gICAgcmFuZ2U6IEluZmluaXR5LFxuICB9XG4gIGNvbnN0IHN0YXRlID0ge1xuICAgIG9wdGlvbnMsXG4gICAgZGVsdGE6IHsgeDogMCwgeTogMCB9LFxuICAgIG9mZnNldDogW3sgeDogMCwgeTogMCB9XSxcbiAgfVxuICBjb25zdCBwYWdlQ29vcmRzID0gT2JqZWN0LmZyZWV6ZSh7IHg6IDEwLCB5OiAyMCB9KVxuICBjb25zdCBhcmcgPSB7XG4gICAgaW50ZXJhY3Rpb24sXG4gICAgaW50ZXJhY3RhYmxlOiBpbnRlcmFjdGlvbi50YXJnZXQsXG4gICAgc3RhdGUsXG4gICAgcGFnZUNvb3JkcyxcbiAgICBjb29yZHM6IHsgLi4ucGFnZUNvb3JkcyB9LFxuICB9XG5cbiAgc25hcFNpemUuc3RhcnQoYXJnKVxuICBzbmFwU2l6ZS5zZXQoYXJnKVxuXG4gIHQuZGVlcEVxdWFsKFxuICAgIGFyZy5jb29yZHMsXG4gICAgdGFyZ2V0MCxcbiAgICAnc25hcFNpemUuc2V0IHNpbmdsZSB0YXJnZXQsIHplcmVvIG9mZnNldCdcbiAgKVxuXG4gIHQuZW5kKClcbn0pXG4iXX0=