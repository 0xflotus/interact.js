import test from '@interactjs/_dev/test/test';
import Interaction from '@interactjs/core/Interaction';
import * as helpers from '@interactjs/core/tests/_helpers';
import pointerUtils from '@interactjs/utils/pointerUtils';
import Signals from '@interactjs/utils/Signals';
import PointerEvent from './PointerEvent';
test('PointerEvent constructor', (t) => {
    const type = 'TEST_EVENT';
    const pointerId = -100;
    const testPointerProp = ['TEST_POINTER_PROP'];
    const pointer = {
        pointerId,
        testPointerProp,
        pointerType: 'TEST_POINTER_TYPE',
    };
    const testEventProp = ['TEST_EVENT_PROP'];
    const event = {
        testEventProp,
    };
    const interaction = new Interaction({ signals: new Signals() });
    const eventTarget = {};
    const pointerEvent = new PointerEvent(type, pointer, event, eventTarget, interaction, 0);
    t.equal(pointerEvent.testPointerProp, testPointerProp, 'pointerEvent is extended form pointer');
    t.equal(pointerEvent.testEventProp, testEventProp, 'pointerEvent is extended form Event');
    t.equal(pointerEvent.type, type, 'type is set correctly');
    t.equal(pointerEvent.pointerType, pointerUtils.getPointerType(pointer), 'pointerType is set correctly');
    t.equal(pointerEvent.pointerId, pointerId, 'pointerId is set correctly');
    t.equal(pointerEvent.originalEvent, event, 'originalEvent is set correctly');
    t.equal(pointerEvent.interaction, interaction, 'interaction is set correctly');
    t.equal(pointerEvent.target, eventTarget, 'target is set correctly');
    t.equal(pointerEvent.currentTarget, null, 'currentTarget is null');
    t.end();
});
test('PointerEvent methods', (t) => {
    const methodContexts = {};
    const event = ['preventDefault', 'stopPropagation', 'stopImmediatePropagation']
        .reduce((acc, methodName) => {
        acc[methodName] = function () { methodContexts[methodName] = this; };
        return acc;
    }, helpers.newPointer());
    const pointerEvent = new PointerEvent('TEST', {}, event, null, {}, 0);
    pointerEvent.preventDefault();
    t.equal(methodContexts.preventDefault, event, 'PointerEvent.preventDefault() calls preventDefault of originalEvent');
    t.notOk(pointerEvent.propagationStopped, 'propagationStopped is false before call to stopPropagation');
    pointerEvent.stopPropagation();
    t.ok(pointerEvent.propagationStopped, 'stopPropagation sets propagationStopped to true');
    t.equal(methodContexts.stopPropagation, undefined, 'PointerEvent.stopPropagation() does not call stopPropagation of originalEvent');
    t.notOk(pointerEvent.immediatePropagationStopped, 'immediatePropagationStopped is false before call to stopImmediatePropagation');
    pointerEvent.stopImmediatePropagation();
    t.equal(methodContexts.stopImmediatePropagation, undefined, 'PointerEvent.stopImmediatePropagation() does not call stopImmediatePropagation of originalEvent');
    t.ok(pointerEvent.immediatePropagationStopped, 'stopImmediatePropagation sets immediatePropagationStopped to true');
    const origin = { x: 20, y: 30 };
    pointerEvent.subtractOrigin(origin);
    t.equal(pointerEvent.pageX, event.pageX - origin.x, 'subtractOrigin updates pageX correctly');
    t.equal(pointerEvent.pageY, event.pageY - origin.y, 'subtractOrigin updates pageY correctly');
    t.equal(pointerEvent.clientX, event.clientX - origin.x, 'subtractOrigin updates clientX correctly');
    t.equal(pointerEvent.clientY, event.clientY - origin.y, 'subtractOrigin updates clientY correctly');
    pointerEvent.addOrigin(origin);
    t.ok(['pageX', 'pageY', 'clientX', 'clientY'].reduce((allEqual, prop) => allEqual && pointerEvent[prop] === event[prop], true), 'addOrigin with the subtracted origin reverts to original coordinates');
    t.end();
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUG9pbnRlckV2ZW50LnNwZWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJQb2ludGVyRXZlbnQuc3BlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLElBQUksTUFBTSw0QkFBNEIsQ0FBQTtBQUM3QyxPQUFPLFdBQVcsTUFBTSw4QkFBOEIsQ0FBQTtBQUN0RCxPQUFPLEtBQUssT0FBTyxNQUFNLGlDQUFpQyxDQUFBO0FBQzFELE9BQU8sWUFBWSxNQUFNLGdDQUFnQyxDQUFBO0FBQ3pELE9BQU8sT0FBTyxNQUFNLDJCQUEyQixDQUFBO0FBQy9DLE9BQU8sWUFBWSxNQUFNLGdCQUFnQixDQUFBO0FBRXpDLElBQUksQ0FBQywwQkFBMEIsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFO0lBQ3JDLE1BQU0sSUFBSSxHQUFHLFlBQVksQ0FBQTtJQUN6QixNQUFNLFNBQVMsR0FBRyxDQUFDLEdBQUcsQ0FBQTtJQUN0QixNQUFNLGVBQWUsR0FBRyxDQUFDLG1CQUFtQixDQUFDLENBQUE7SUFDN0MsTUFBTSxPQUFPLEdBQUc7UUFDZCxTQUFTO1FBQ1QsZUFBZTtRQUNmLFdBQVcsRUFBRSxtQkFBbUI7S0FDMUIsQ0FBQTtJQUNSLE1BQU0sYUFBYSxHQUFHLENBQUMsaUJBQWlCLENBQUMsQ0FBQTtJQUN6QyxNQUFNLEtBQUssR0FBRztRQUNaLGFBQWE7S0FDUCxDQUFBO0lBQ1IsTUFBTSxXQUFXLEdBQUcsSUFBSSxXQUFXLENBQUMsRUFBRSxPQUFPLEVBQUUsSUFBSSxPQUFPLEVBQUUsRUFBUyxDQUFDLENBQUE7SUFDdEUsTUFBTSxXQUFXLEdBQUcsRUFBYSxDQUFBO0lBQ2pDLE1BQU0sWUFBWSxHQUFHLElBQUksWUFBWSxDQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsQ0FBQyxDQUFRLENBQUE7SUFFL0YsQ0FBQyxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsZUFBZSxFQUFFLGVBQWUsRUFDbkQsdUNBQXVDLENBQUMsQ0FBQTtJQUMxQyxDQUFDLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxhQUFhLEVBQUUsYUFBYSxFQUMvQyxxQ0FBcUMsQ0FBQyxDQUFBO0lBRXhDLENBQUMsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxJQUFJLEVBQzdCLHVCQUF1QixDQUFDLENBQUE7SUFDMUIsQ0FBQyxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsV0FBVyxFQUFFLFlBQVksQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLEVBQ3BFLDhCQUE4QixDQUFDLENBQUE7SUFDakMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsU0FBUyxFQUFFLFNBQVMsRUFDdkMsNEJBQTRCLENBQUMsQ0FBQTtJQUMvQixDQUFDLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxhQUFhLEVBQUUsS0FBSyxFQUN2QyxnQ0FBZ0MsQ0FBQyxDQUFBO0lBQ25DLENBQUMsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLFdBQVcsRUFBRSxXQUFXLEVBQzNDLDhCQUE4QixDQUFDLENBQUE7SUFDakMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFLFdBQVcsRUFDdEMseUJBQXlCLENBQUMsQ0FBQTtJQUM1QixDQUFDLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxhQUFhLEVBQUUsSUFBSSxFQUN0Qyx1QkFBdUIsQ0FBQyxDQUFBO0lBRTFCLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQTtBQUNULENBQUMsQ0FBQyxDQUFBO0FBRUYsSUFBSSxDQUFDLHNCQUFzQixFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUU7SUFDakMsTUFBTSxjQUFjLEdBQUcsRUFBUyxDQUFBO0lBQ2hDLE1BQU0sS0FBSyxHQUFRLENBQUMsZ0JBQWdCLEVBQUUsaUJBQWlCLEVBQUUsMEJBQTBCLENBQUM7U0FDakYsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLFVBQVUsRUFBRSxFQUFFO1FBQzFCLEdBQUcsQ0FBQyxVQUFVLENBQUMsR0FBRyxjQUFjLGNBQWMsQ0FBQyxVQUFVLENBQUMsR0FBRyxJQUFJLENBQUEsQ0FBQyxDQUFDLENBQUE7UUFDbkUsT0FBTyxHQUFHLENBQUE7SUFDWixDQUFDLEVBQUUsT0FBTyxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUE7SUFDMUIsTUFBTSxZQUFZLEdBQUcsSUFBSSxZQUFZLENBQUMsTUFBTSxFQUFFLEVBQVMsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEVBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQTtJQUVuRixZQUFZLENBQUMsY0FBYyxFQUFFLENBQUE7SUFDN0IsQ0FBQyxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsY0FBYyxFQUFFLEtBQUssRUFDMUMscUVBQXFFLENBQUMsQ0FBQTtJQUV4RSxDQUFDLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxrQkFBa0IsRUFDckMsNERBQTRELENBQUMsQ0FBQTtJQUMvRCxZQUFZLENBQUMsZUFBZSxFQUFFLENBQUE7SUFDOUIsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsa0JBQWtCLEVBQ2xDLGlEQUFpRCxDQUFDLENBQUE7SUFDcEQsQ0FBQyxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsZUFBZSxFQUFFLFNBQVMsRUFDL0MsK0VBQStFLENBQUMsQ0FBQTtJQUVsRixDQUFDLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQywyQkFBMkIsRUFDOUMsOEVBQThFLENBQUMsQ0FBQTtJQUNqRixZQUFZLENBQUMsd0JBQXdCLEVBQUUsQ0FBQTtJQUN2QyxDQUFDLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyx3QkFBd0IsRUFBRSxTQUFTLEVBQ3hELGlHQUFpRyxDQUFDLENBQUE7SUFDcEcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsMkJBQTJCLEVBQzNDLG1FQUFtRSxDQUFDLENBQUE7SUFFdEUsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQTtJQUMvQixZQUFZLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBRW5DLENBQUMsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBSSxLQUFLLENBQUMsS0FBSyxHQUFLLE1BQU0sQ0FBQyxDQUFDLEVBQUUsd0NBQXdDLENBQUMsQ0FBQTtJQUNqRyxDQUFDLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxLQUFLLEVBQUksS0FBSyxDQUFDLEtBQUssR0FBSyxNQUFNLENBQUMsQ0FBQyxFQUFFLHdDQUF3QyxDQUFDLENBQUE7SUFDakcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDLENBQUMsRUFBRSwwQ0FBMEMsQ0FBQyxDQUFBO0lBQ25HLENBQUMsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQyxDQUFDLEVBQUUsMENBQTBDLENBQUMsQ0FBQTtJQUVuRyxZQUFZLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQzlCLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxTQUFTLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxRQUFRLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxRQUFRLElBQUksWUFBWSxDQUFDLElBQUksQ0FBQyxLQUFLLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLENBQUMsRUFDNUgsc0VBQXNFLENBQUMsQ0FBQTtJQUV6RSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUE7QUFDVCxDQUFDLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0ZXN0IGZyb20gJ0BpbnRlcmFjdGpzL19kZXYvdGVzdC90ZXN0J1xuaW1wb3J0IEludGVyYWN0aW9uIGZyb20gJ0BpbnRlcmFjdGpzL2NvcmUvSW50ZXJhY3Rpb24nXG5pbXBvcnQgKiBhcyBoZWxwZXJzIGZyb20gJ0BpbnRlcmFjdGpzL2NvcmUvdGVzdHMvX2hlbHBlcnMnXG5pbXBvcnQgcG9pbnRlclV0aWxzIGZyb20gJ0BpbnRlcmFjdGpzL3V0aWxzL3BvaW50ZXJVdGlscydcbmltcG9ydCBTaWduYWxzIGZyb20gJ0BpbnRlcmFjdGpzL3V0aWxzL1NpZ25hbHMnXG5pbXBvcnQgUG9pbnRlckV2ZW50IGZyb20gJy4vUG9pbnRlckV2ZW50J1xuXG50ZXN0KCdQb2ludGVyRXZlbnQgY29uc3RydWN0b3InLCAodCkgPT4ge1xuICBjb25zdCB0eXBlID0gJ1RFU1RfRVZFTlQnXG4gIGNvbnN0IHBvaW50ZXJJZCA9IC0xMDBcbiAgY29uc3QgdGVzdFBvaW50ZXJQcm9wID0gWydURVNUX1BPSU5URVJfUFJPUCddXG4gIGNvbnN0IHBvaW50ZXIgPSB7XG4gICAgcG9pbnRlcklkLFxuICAgIHRlc3RQb2ludGVyUHJvcCxcbiAgICBwb2ludGVyVHlwZTogJ1RFU1RfUE9JTlRFUl9UWVBFJyxcbiAgfSBhcyBhbnlcbiAgY29uc3QgdGVzdEV2ZW50UHJvcCA9IFsnVEVTVF9FVkVOVF9QUk9QJ11cbiAgY29uc3QgZXZlbnQgPSB7XG4gICAgdGVzdEV2ZW50UHJvcCxcbiAgfSBhcyBhbnlcbiAgY29uc3QgaW50ZXJhY3Rpb24gPSBuZXcgSW50ZXJhY3Rpb24oeyBzaWduYWxzOiBuZXcgU2lnbmFscygpIH0gYXMgYW55KVxuICBjb25zdCBldmVudFRhcmdldCA9IHt9IGFzIEVsZW1lbnRcbiAgY29uc3QgcG9pbnRlckV2ZW50ID0gbmV3IFBvaW50ZXJFdmVudCh0eXBlLCBwb2ludGVyLCBldmVudCwgZXZlbnRUYXJnZXQsIGludGVyYWN0aW9uLCAwKSBhcyBhbnlcblxuICB0LmVxdWFsKHBvaW50ZXJFdmVudC50ZXN0UG9pbnRlclByb3AsIHRlc3RQb2ludGVyUHJvcCxcbiAgICAncG9pbnRlckV2ZW50IGlzIGV4dGVuZGVkIGZvcm0gcG9pbnRlcicpXG4gIHQuZXF1YWwocG9pbnRlckV2ZW50LnRlc3RFdmVudFByb3AsIHRlc3RFdmVudFByb3AsXG4gICAgJ3BvaW50ZXJFdmVudCBpcyBleHRlbmRlZCBmb3JtIEV2ZW50JylcblxuICB0LmVxdWFsKHBvaW50ZXJFdmVudC50eXBlLCB0eXBlLFxuICAgICd0eXBlIGlzIHNldCBjb3JyZWN0bHknKVxuICB0LmVxdWFsKHBvaW50ZXJFdmVudC5wb2ludGVyVHlwZSwgcG9pbnRlclV0aWxzLmdldFBvaW50ZXJUeXBlKHBvaW50ZXIpLFxuICAgICdwb2ludGVyVHlwZSBpcyBzZXQgY29ycmVjdGx5JylcbiAgdC5lcXVhbChwb2ludGVyRXZlbnQucG9pbnRlcklkLCBwb2ludGVySWQsXG4gICAgJ3BvaW50ZXJJZCBpcyBzZXQgY29ycmVjdGx5JylcbiAgdC5lcXVhbChwb2ludGVyRXZlbnQub3JpZ2luYWxFdmVudCwgZXZlbnQsXG4gICAgJ29yaWdpbmFsRXZlbnQgaXMgc2V0IGNvcnJlY3RseScpXG4gIHQuZXF1YWwocG9pbnRlckV2ZW50LmludGVyYWN0aW9uLCBpbnRlcmFjdGlvbixcbiAgICAnaW50ZXJhY3Rpb24gaXMgc2V0IGNvcnJlY3RseScpXG4gIHQuZXF1YWwocG9pbnRlckV2ZW50LnRhcmdldCwgZXZlbnRUYXJnZXQsXG4gICAgJ3RhcmdldCBpcyBzZXQgY29ycmVjdGx5JylcbiAgdC5lcXVhbChwb2ludGVyRXZlbnQuY3VycmVudFRhcmdldCwgbnVsbCxcbiAgICAnY3VycmVudFRhcmdldCBpcyBudWxsJylcblxuICB0LmVuZCgpXG59KVxuXG50ZXN0KCdQb2ludGVyRXZlbnQgbWV0aG9kcycsICh0KSA9PiB7XG4gIGNvbnN0IG1ldGhvZENvbnRleHRzID0ge30gYXMgYW55XG4gIGNvbnN0IGV2ZW50OiBhbnkgPSBbJ3ByZXZlbnREZWZhdWx0JywgJ3N0b3BQcm9wYWdhdGlvbicsICdzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24nXVxuICAgIC5yZWR1Y2UoKGFjYywgbWV0aG9kTmFtZSkgPT4ge1xuICAgICAgYWNjW21ldGhvZE5hbWVdID0gZnVuY3Rpb24gKCkgeyBtZXRob2RDb250ZXh0c1ttZXRob2ROYW1lXSA9IHRoaXMgfVxuICAgICAgcmV0dXJuIGFjY1xuICAgIH0sIGhlbHBlcnMubmV3UG9pbnRlcigpKVxuICBjb25zdCBwb2ludGVyRXZlbnQgPSBuZXcgUG9pbnRlckV2ZW50KCdURVNUJywge30gYXMgYW55LCBldmVudCwgbnVsbCwge30gYXMgYW55LCAwKVxuXG4gIHBvaW50ZXJFdmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gIHQuZXF1YWwobWV0aG9kQ29udGV4dHMucHJldmVudERlZmF1bHQsIGV2ZW50LFxuICAgICdQb2ludGVyRXZlbnQucHJldmVudERlZmF1bHQoKSBjYWxscyBwcmV2ZW50RGVmYXVsdCBvZiBvcmlnaW5hbEV2ZW50JylcblxuICB0Lm5vdE9rKHBvaW50ZXJFdmVudC5wcm9wYWdhdGlvblN0b3BwZWQsXG4gICAgJ3Byb3BhZ2F0aW9uU3RvcHBlZCBpcyBmYWxzZSBiZWZvcmUgY2FsbCB0byBzdG9wUHJvcGFnYXRpb24nKVxuICBwb2ludGVyRXZlbnQuc3RvcFByb3BhZ2F0aW9uKClcbiAgdC5vayhwb2ludGVyRXZlbnQucHJvcGFnYXRpb25TdG9wcGVkLFxuICAgICdzdG9wUHJvcGFnYXRpb24gc2V0cyBwcm9wYWdhdGlvblN0b3BwZWQgdG8gdHJ1ZScpXG4gIHQuZXF1YWwobWV0aG9kQ29udGV4dHMuc3RvcFByb3BhZ2F0aW9uLCB1bmRlZmluZWQsXG4gICAgJ1BvaW50ZXJFdmVudC5zdG9wUHJvcGFnYXRpb24oKSBkb2VzIG5vdCBjYWxsIHN0b3BQcm9wYWdhdGlvbiBvZiBvcmlnaW5hbEV2ZW50JylcblxuICB0Lm5vdE9rKHBvaW50ZXJFdmVudC5pbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQsXG4gICAgJ2ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCBpcyBmYWxzZSBiZWZvcmUgY2FsbCB0byBzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24nKVxuICBwb2ludGVyRXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKClcbiAgdC5lcXVhbChtZXRob2RDb250ZXh0cy5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24sIHVuZGVmaW5lZCxcbiAgICAnUG9pbnRlckV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpIGRvZXMgbm90IGNhbGwgc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIG9mIG9yaWdpbmFsRXZlbnQnKVxuICB0Lm9rKHBvaW50ZXJFdmVudC5pbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQsXG4gICAgJ3N0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiBzZXRzIGltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCB0byB0cnVlJylcblxuICBjb25zdCBvcmlnaW4gPSB7IHg6IDIwLCB5OiAzMCB9XG4gIHBvaW50ZXJFdmVudC5zdWJ0cmFjdE9yaWdpbihvcmlnaW4pXG5cbiAgdC5lcXVhbChwb2ludGVyRXZlbnQucGFnZVgsICAgZXZlbnQucGFnZVggICAtIG9yaWdpbi54LCAnc3VidHJhY3RPcmlnaW4gdXBkYXRlcyBwYWdlWCBjb3JyZWN0bHknKVxuICB0LmVxdWFsKHBvaW50ZXJFdmVudC5wYWdlWSwgICBldmVudC5wYWdlWSAgIC0gb3JpZ2luLnksICdzdWJ0cmFjdE9yaWdpbiB1cGRhdGVzIHBhZ2VZIGNvcnJlY3RseScpXG4gIHQuZXF1YWwocG9pbnRlckV2ZW50LmNsaWVudFgsIGV2ZW50LmNsaWVudFggLSBvcmlnaW4ueCwgJ3N1YnRyYWN0T3JpZ2luIHVwZGF0ZXMgY2xpZW50WCBjb3JyZWN0bHknKVxuICB0LmVxdWFsKHBvaW50ZXJFdmVudC5jbGllbnRZLCBldmVudC5jbGllbnRZIC0gb3JpZ2luLnksICdzdWJ0cmFjdE9yaWdpbiB1cGRhdGVzIGNsaWVudFkgY29ycmVjdGx5JylcblxuICBwb2ludGVyRXZlbnQuYWRkT3JpZ2luKG9yaWdpbilcbiAgdC5vayhbJ3BhZ2VYJywgJ3BhZ2VZJywgJ2NsaWVudFgnLCAnY2xpZW50WSddLnJlZHVjZSgoYWxsRXF1YWwsIHByb3ApID0+IGFsbEVxdWFsICYmIHBvaW50ZXJFdmVudFtwcm9wXSA9PT0gZXZlbnRbcHJvcF0sIHRydWUpLFxuICAgICdhZGRPcmlnaW4gd2l0aCB0aGUgc3VidHJhY3RlZCBvcmlnaW4gcmV2ZXJ0cyB0byBvcmlnaW5hbCBjb29yZGluYXRlcycpXG5cbiAgdC5lbmQoKVxufSlcbiJdfQ==