import test from '@interactjs/_dev/test/test';
import Eventable from '@interactjs/core/Eventable';
import * as helpers from '@interactjs/core/tests/_helpers';
import Signals from '@interactjs/utils/Signals';
import pointerEvents from './base';
import holdRepeat from './holdRepeat';
function mockScope() {
    return helpers.mockScope({
        pointerEvents: {
            defaults: {},
            signals: new Signals(),
            types: [],
            fire: () => { },
        },
    });
}
test('holdRepeat count', (t) => {
    const scope = mockScope();
    const pointerEvent = {
        type: 'hold',
        count: 0,
    };
    pointerEvents.install(scope);
    holdRepeat.install(scope);
    scope.pointerEvents.signals.fire('new', { pointerEvent });
    t.equal(pointerEvent.count, 1, 'first hold count is 1 with count previously undefined');
    const count = 20;
    pointerEvent.count = count;
    scope.pointerEvents.signals.fire('new', { pointerEvent });
    t.equal(pointerEvent.count, count + 1, 'existing hold count is incremented');
    t.end();
});
test('holdRepeat onFired', (t) => {
    const scope = mockScope();
    pointerEvents.install(scope);
    holdRepeat.install(scope);
    const interaction = scope.interactions.new({});
    const pointerEvent = {
        type: 'hold',
    };
    const eventTarget = {};
    const eventable = new Eventable(Object.assign({}, scope.pointerEvents.defaults, {
        holdRepeatInterval: 0,
    }));
    const signalArg = {
        interaction,
        pointerEvent,
        eventTarget,
        targets: [{
                eventable,
            }],
    };
    scope.pointerEvents.signals.fire('fired', signalArg);
    t.notOk('holdIntervalHandle' in interaction, 'interaction interval handle was not saved with 0 holdRepeatInterval');
    eventable.options.holdRepeatInterval = 10;
    scope.pointerEvents.signals.fire('fired', signalArg);
    t.ok('holdIntervalHandle' in interaction, 'interaction interval handle was saved with interval > 0');
    clearInterval(interaction.holdIntervalHandle);
    pointerEvent.type = 'NOT_HOLD';
    delete interaction.holdIntervalHandle;
    scope.pointerEvents.signals.fire('fired', signalArg);
    t.notOk('holdIntervalHandle' in interaction, 'interaction interval handle is not saved if pointerEvent.type is not "hold"');
    t.end();
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaG9sZFJlcGVhdC5zcGVjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaG9sZFJlcGVhdC5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sSUFBSSxNQUFNLDRCQUE0QixDQUFBO0FBQzdDLE9BQU8sU0FBUyxNQUFNLDRCQUE0QixDQUFBO0FBQ2xELE9BQU8sS0FBSyxPQUFPLE1BQU0saUNBQWlDLENBQUE7QUFDMUQsT0FBTyxPQUFPLE1BQU0sMkJBQTJCLENBQUE7QUFDL0MsT0FBTyxhQUFhLE1BQU0sUUFBUSxDQUFBO0FBQ2xDLE9BQU8sVUFBVSxNQUFNLGNBQWMsQ0FBQTtBQUVyQyxTQUFTLFNBQVM7SUFDaEIsT0FBTyxPQUFPLENBQUMsU0FBUyxDQUFDO1FBQ3ZCLGFBQWEsRUFBRTtZQUNiLFFBQVEsRUFBRSxFQUFFO1lBQ1osT0FBTyxFQUFFLElBQUksT0FBTyxFQUFFO1lBQ3RCLEtBQUssRUFBRSxFQUFFO1lBQ1QsSUFBSSxFQUFFLEdBQUcsRUFBRSxHQUFFLENBQUM7U0FDZjtLQUNGLENBQUMsQ0FBQTtBQUNKLENBQUM7QUFFRCxJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRTtJQUM3QixNQUFNLEtBQUssR0FBRyxTQUFTLEVBQUUsQ0FBQTtJQUN6QixNQUFNLFlBQVksR0FBRztRQUNuQixJQUFJLEVBQUUsTUFBTTtRQUNaLEtBQUssRUFBRSxDQUFDO0tBQ1QsQ0FBQTtJQUVELGFBQWEsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUE7SUFDNUIsVUFBVSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQTtJQUV6QixLQUFLLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLEVBQUUsWUFBWSxFQUFFLENBQUMsQ0FBQTtJQUN6RCxDQUFDLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLHVEQUF1RCxDQUFDLENBQUE7SUFFdkYsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFBO0lBQ2hCLFlBQVksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFBO0lBQzFCLEtBQUssQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsRUFBRSxZQUFZLEVBQUUsQ0FBQyxDQUFBO0lBQ3pELENBQUMsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRSxLQUFLLEdBQUcsQ0FBQyxFQUFFLG9DQUFvQyxDQUFDLENBQUE7SUFFNUUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFBO0FBQ1QsQ0FBQyxDQUFDLENBQUE7QUFFRixJQUFJLENBQUMsb0JBQW9CLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRTtJQUMvQixNQUFNLEtBQUssR0FBRyxTQUFTLEVBQUUsQ0FBQTtJQUN6QixhQUFhLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFBO0lBQzVCLFVBQVUsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUE7SUFFekIsTUFBTSxXQUFXLEdBQUcsS0FBSyxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDOUMsTUFBTSxZQUFZLEdBQUc7UUFDbkIsSUFBSSxFQUFFLE1BQU07S0FDYixDQUFBO0lBQ0QsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFBO0lBQ3RCLE1BQU0sU0FBUyxHQUFHLElBQUksU0FBUyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLEtBQUssQ0FBQyxhQUFhLENBQUMsUUFBUSxFQUFFO1FBQzlFLGtCQUFrQixFQUFFLENBQUM7S0FDdEIsQ0FBQyxDQUFDLENBQUE7SUFDSCxNQUFNLFNBQVMsR0FBRztRQUNoQixXQUFXO1FBQ1gsWUFBWTtRQUNaLFdBQVc7UUFDWCxPQUFPLEVBQUUsQ0FBQztnQkFDUixTQUFTO2FBQ1YsQ0FBQztLQUNILENBQUE7SUFFRCxLQUFLLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLFNBQVMsQ0FBQyxDQUFBO0lBQ3BELENBQUMsQ0FBQyxLQUFLLENBQUMsb0JBQW9CLElBQUksV0FBVyxFQUN6QyxxRUFBcUUsQ0FBQyxDQUFBO0lBRXhFLFNBQVMsQ0FBQyxPQUFPLENBQUMsa0JBQWtCLEdBQUcsRUFBRSxDQUFBO0lBQ3pDLEtBQUssQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFDLENBQUE7SUFDcEQsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxvQkFBb0IsSUFBSSxXQUFXLEVBQ3RDLHlEQUF5RCxDQUFDLENBQUE7SUFFNUQsYUFBYSxDQUFDLFdBQVcsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFBO0lBRTdDLFlBQVksQ0FBQyxJQUFJLEdBQUcsVUFBVSxDQUFBO0lBQzlCLE9BQU8sV0FBVyxDQUFDLGtCQUFrQixDQUFBO0lBQ3JDLEtBQUssQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFDLENBQUE7SUFDcEQsQ0FBQyxDQUFDLEtBQUssQ0FBQyxvQkFBb0IsSUFBSSxXQUFXLEVBQ3pDLDZFQUE2RSxDQUFDLENBQUE7SUFFaEYsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFBO0FBQ1QsQ0FBQyxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdGVzdCBmcm9tICdAaW50ZXJhY3Rqcy9fZGV2L3Rlc3QvdGVzdCdcbmltcG9ydCBFdmVudGFibGUgZnJvbSAnQGludGVyYWN0anMvY29yZS9FdmVudGFibGUnXG5pbXBvcnQgKiBhcyBoZWxwZXJzIGZyb20gJ0BpbnRlcmFjdGpzL2NvcmUvdGVzdHMvX2hlbHBlcnMnXG5pbXBvcnQgU2lnbmFscyBmcm9tICdAaW50ZXJhY3Rqcy91dGlscy9TaWduYWxzJ1xuaW1wb3J0IHBvaW50ZXJFdmVudHMgZnJvbSAnLi9iYXNlJ1xuaW1wb3J0IGhvbGRSZXBlYXQgZnJvbSAnLi9ob2xkUmVwZWF0J1xuXG5mdW5jdGlvbiBtb2NrU2NvcGUgKCkge1xuICByZXR1cm4gaGVscGVycy5tb2NrU2NvcGUoe1xuICAgIHBvaW50ZXJFdmVudHM6IHtcbiAgICAgIGRlZmF1bHRzOiB7fSxcbiAgICAgIHNpZ25hbHM6IG5ldyBTaWduYWxzKCksXG4gICAgICB0eXBlczogW10sXG4gICAgICBmaXJlOiAoKSA9PiB7fSxcbiAgICB9LFxuICB9KVxufVxuXG50ZXN0KCdob2xkUmVwZWF0IGNvdW50JywgKHQpID0+IHtcbiAgY29uc3Qgc2NvcGUgPSBtb2NrU2NvcGUoKVxuICBjb25zdCBwb2ludGVyRXZlbnQgPSB7XG4gICAgdHlwZTogJ2hvbGQnLFxuICAgIGNvdW50OiAwLFxuICB9XG5cbiAgcG9pbnRlckV2ZW50cy5pbnN0YWxsKHNjb3BlKVxuICBob2xkUmVwZWF0Lmluc3RhbGwoc2NvcGUpXG5cbiAgc2NvcGUucG9pbnRlckV2ZW50cy5zaWduYWxzLmZpcmUoJ25ldycsIHsgcG9pbnRlckV2ZW50IH0pXG4gIHQuZXF1YWwocG9pbnRlckV2ZW50LmNvdW50LCAxLCAnZmlyc3QgaG9sZCBjb3VudCBpcyAxIHdpdGggY291bnQgcHJldmlvdXNseSB1bmRlZmluZWQnKVxuXG4gIGNvbnN0IGNvdW50ID0gMjBcbiAgcG9pbnRlckV2ZW50LmNvdW50ID0gY291bnRcbiAgc2NvcGUucG9pbnRlckV2ZW50cy5zaWduYWxzLmZpcmUoJ25ldycsIHsgcG9pbnRlckV2ZW50IH0pXG4gIHQuZXF1YWwocG9pbnRlckV2ZW50LmNvdW50LCBjb3VudCArIDEsICdleGlzdGluZyBob2xkIGNvdW50IGlzIGluY3JlbWVudGVkJylcblxuICB0LmVuZCgpXG59KVxuXG50ZXN0KCdob2xkUmVwZWF0IG9uRmlyZWQnLCAodCkgPT4ge1xuICBjb25zdCBzY29wZSA9IG1vY2tTY29wZSgpXG4gIHBvaW50ZXJFdmVudHMuaW5zdGFsbChzY29wZSlcbiAgaG9sZFJlcGVhdC5pbnN0YWxsKHNjb3BlKVxuXG4gIGNvbnN0IGludGVyYWN0aW9uID0gc2NvcGUuaW50ZXJhY3Rpb25zLm5ldyh7fSlcbiAgY29uc3QgcG9pbnRlckV2ZW50ID0ge1xuICAgIHR5cGU6ICdob2xkJyxcbiAgfVxuICBjb25zdCBldmVudFRhcmdldCA9IHt9XG4gIGNvbnN0IGV2ZW50YWJsZSA9IG5ldyBFdmVudGFibGUoT2JqZWN0LmFzc2lnbih7fSwgc2NvcGUucG9pbnRlckV2ZW50cy5kZWZhdWx0cywge1xuICAgIGhvbGRSZXBlYXRJbnRlcnZhbDogMCxcbiAgfSkpXG4gIGNvbnN0IHNpZ25hbEFyZyA9IHtcbiAgICBpbnRlcmFjdGlvbixcbiAgICBwb2ludGVyRXZlbnQsXG4gICAgZXZlbnRUYXJnZXQsXG4gICAgdGFyZ2V0czogW3tcbiAgICAgIGV2ZW50YWJsZSxcbiAgICB9XSxcbiAgfVxuXG4gIHNjb3BlLnBvaW50ZXJFdmVudHMuc2lnbmFscy5maXJlKCdmaXJlZCcsIHNpZ25hbEFyZylcbiAgdC5ub3RPaygnaG9sZEludGVydmFsSGFuZGxlJyBpbiBpbnRlcmFjdGlvbixcbiAgICAnaW50ZXJhY3Rpb24gaW50ZXJ2YWwgaGFuZGxlIHdhcyBub3Qgc2F2ZWQgd2l0aCAwIGhvbGRSZXBlYXRJbnRlcnZhbCcpXG5cbiAgZXZlbnRhYmxlLm9wdGlvbnMuaG9sZFJlcGVhdEludGVydmFsID0gMTBcbiAgc2NvcGUucG9pbnRlckV2ZW50cy5zaWduYWxzLmZpcmUoJ2ZpcmVkJywgc2lnbmFsQXJnKVxuICB0Lm9rKCdob2xkSW50ZXJ2YWxIYW5kbGUnIGluIGludGVyYWN0aW9uLFxuICAgICdpbnRlcmFjdGlvbiBpbnRlcnZhbCBoYW5kbGUgd2FzIHNhdmVkIHdpdGggaW50ZXJ2YWwgPiAwJylcblxuICBjbGVhckludGVydmFsKGludGVyYWN0aW9uLmhvbGRJbnRlcnZhbEhhbmRsZSlcblxuICBwb2ludGVyRXZlbnQudHlwZSA9ICdOT1RfSE9MRCdcbiAgZGVsZXRlIGludGVyYWN0aW9uLmhvbGRJbnRlcnZhbEhhbmRsZVxuICBzY29wZS5wb2ludGVyRXZlbnRzLnNpZ25hbHMuZmlyZSgnZmlyZWQnLCBzaWduYWxBcmcpXG4gIHQubm90T2soJ2hvbGRJbnRlcnZhbEhhbmRsZScgaW4gaW50ZXJhY3Rpb24sXG4gICAgJ2ludGVyYWN0aW9uIGludGVydmFsIGhhbmRsZSBpcyBub3Qgc2F2ZWQgaWYgcG9pbnRlckV2ZW50LnR5cGUgaXMgbm90IFwiaG9sZFwiJylcblxuICB0LmVuZCgpXG59KVxuIl19