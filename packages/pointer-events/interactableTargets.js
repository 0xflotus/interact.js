import { merge } from '@interactjs/utils/arr';
import extend from '@interactjs/utils/extend';
function install(scope) {
    const { pointerEvents, actions, Interactable, interactables, } = scope;
    pointerEvents.signals.on('collect-targets', ({ targets, node, type, eventTarget }) => {
        scope.interactables.forEachMatch(node, (interactable) => {
            const eventable = interactable.events;
            const options = eventable.options;
            if (eventable.types[type] &&
                eventable.types[type].length &&
                interactable.testIgnoreAllow(options, node, eventTarget)) {
                targets.push({
                    node,
                    eventable,
                    props: { interactable },
                });
            }
        });
    });
    interactables.signals.on('new', ({ interactable }) => {
        interactable.events.getRect = function (element) {
            return interactable.getRect(element);
        };
    });
    interactables.signals.on('set', ({ interactable, options }) => {
        extend(interactable.events.options, pointerEvents.defaults);
        extend(interactable.events.options, options.pointerEvents || {});
    });
    merge(actions.eventTypes, pointerEvents.types);
    Interactable.prototype.pointerEvents = pointerEventsMethod;
    const __backCompatOption = Interactable.prototype._backCompatOption;
    Interactable.prototype._backCompatOption = function (optionName, newValue) {
        const ret = __backCompatOption.call(this, optionName, newValue);
        if (ret === this) {
            this.events.options[optionName] = newValue;
        }
        return ret;
    };
}
function pointerEventsMethod(options) {
    extend(this.events.options, options);
    return this;
}
export default {
    id: 'pointer-events/interactableTargets',
    install,
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJhY3RhYmxlVGFyZ2V0cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImludGVyYWN0YWJsZVRhcmdldHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLHVCQUF1QixDQUFBO0FBQzdDLE9BQU8sTUFBTSxNQUFNLDBCQUEwQixDQUFBO0FBVzdDLFNBQVMsT0FBTyxDQUFFLEtBQVk7SUFDNUIsTUFBTSxFQUNKLGFBQWEsRUFDYixPQUFPLEVBQ1AsWUFBWSxFQUNaLGFBQWEsR0FDZCxHQUFHLEtBQUssQ0FBQTtJQUVULGFBQWEsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLGlCQUFpQixFQUFFLENBQUMsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxXQUFXLEVBQU8sRUFBRSxFQUFFO1FBQ3hGLEtBQUssQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxDQUFDLFlBQTBCLEVBQUUsRUFBRTtZQUNwRSxNQUFNLFNBQVMsR0FBRyxZQUFZLENBQUMsTUFBTSxDQUFBO1lBQ3JDLE1BQU0sT0FBTyxHQUFHLFNBQVMsQ0FBQyxPQUFPLENBQUE7WUFFakMsSUFDRSxTQUFTLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQztnQkFDckIsU0FBUyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNO2dCQUM1QixZQUFZLENBQUMsZUFBZSxDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsV0FBVyxDQUFDLEVBQUU7Z0JBQzFELE9BQU8sQ0FBQyxJQUFJLENBQUM7b0JBQ1gsSUFBSTtvQkFDSixTQUFTO29CQUNULEtBQUssRUFBRSxFQUFFLFlBQVksRUFBRTtpQkFDeEIsQ0FBQyxDQUFBO2FBQ0g7UUFDSCxDQUFDLENBQUMsQ0FBQTtJQUNKLENBQUMsQ0FBQyxDQUFBO0lBRUYsYUFBYSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxZQUFZLEVBQUUsRUFBRSxFQUFFO1FBQ25ELFlBQVksQ0FBQyxNQUFNLENBQUMsT0FBTyxHQUFHLFVBQVUsT0FBZ0I7WUFDdEQsT0FBTyxZQUFZLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBQ3RDLENBQUMsQ0FBQTtJQUNILENBQUMsQ0FBQyxDQUFBO0lBRUYsYUFBYSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxZQUFZLEVBQUUsT0FBTyxFQUFFLEVBQUUsRUFBRTtRQUM1RCxNQUFNLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFBO1FBQzNELE1BQU0sQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsYUFBYSxJQUFJLEVBQUUsQ0FBQyxDQUFBO0lBQ2xFLENBQUMsQ0FBQyxDQUFBO0lBRUYsS0FBSyxDQUFDLE9BQU8sQ0FBQyxVQUFVLEVBQUUsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFBO0lBRTlDLFlBQVksQ0FBQyxTQUFTLENBQUMsYUFBYSxHQUFHLG1CQUFtQixDQUFBO0lBRTFELE1BQU0sa0JBQWtCLEdBQUcsWUFBWSxDQUFDLFNBQVMsQ0FBQyxpQkFBaUIsQ0FBQTtJQUVuRSxZQUFZLENBQUMsU0FBUyxDQUFDLGlCQUFpQixHQUFHLFVBQVUsVUFBVSxFQUFFLFFBQVE7UUFDdkUsTUFBTSxHQUFHLEdBQUcsa0JBQWtCLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxVQUFVLEVBQUUsUUFBUSxDQUFDLENBQUE7UUFFL0QsSUFBSSxHQUFHLEtBQUssSUFBSSxFQUFFO1lBQ2hCLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxHQUFHLFFBQVEsQ0FBQTtTQUMzQztRQUVELE9BQU8sR0FBRyxDQUFBO0lBQ1osQ0FBQyxDQUFBO0FBQ0gsQ0FBQztBQUVELFNBQVMsbUJBQW1CLENBQXNCLE9BQVk7SUFDNUQsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFBO0lBRXBDLE9BQU8sSUFBSSxDQUFBO0FBQ2IsQ0FBQztBQUVELGVBQWU7SUFDYixFQUFFLEVBQUUsb0NBQW9DO0lBQ3hDLE9BQU87Q0FDUixDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU2NvcGUgfSBmcm9tICdAaW50ZXJhY3Rqcy9jb3JlL3Njb3BlJ1xuaW1wb3J0IHsgbWVyZ2UgfSBmcm9tICdAaW50ZXJhY3Rqcy91dGlscy9hcnInXG5pbXBvcnQgZXh0ZW5kIGZyb20gJ0BpbnRlcmFjdGpzL3V0aWxzL2V4dGVuZCdcblxudHlwZSBJbnRlcmFjdGFibGUgPSBpbXBvcnQgKCdAaW50ZXJhY3Rqcy9jb3JlL0ludGVyYWN0YWJsZScpLmRlZmF1bHRcblxuZGVjbGFyZSBtb2R1bGUgJ0BpbnRlcmFjdGpzL2NvcmUvSW50ZXJhY3RhYmxlJyB7XG4gIGludGVyZmFjZSBJbnRlcmFjdGFibGUge1xuICAgIHBvaW50ZXJFdmVudHM6IHR5cGVvZiBwb2ludGVyRXZlbnRzTWV0aG9kXG4gICAgX19iYWNrQ29tcGF0T3B0aW9uOiAob3B0aW9uTmFtZTogc3RyaW5nLCBuZXdWYWx1ZTogYW55KSA9PiBhbnlcbiAgfVxufVxuXG5mdW5jdGlvbiBpbnN0YWxsIChzY29wZTogU2NvcGUpIHtcbiAgY29uc3Qge1xuICAgIHBvaW50ZXJFdmVudHMsXG4gICAgYWN0aW9ucyxcbiAgICBJbnRlcmFjdGFibGUsXG4gICAgaW50ZXJhY3RhYmxlcyxcbiAgfSA9IHNjb3BlXG5cbiAgcG9pbnRlckV2ZW50cy5zaWduYWxzLm9uKCdjb2xsZWN0LXRhcmdldHMnLCAoeyB0YXJnZXRzLCBub2RlLCB0eXBlLCBldmVudFRhcmdldCB9OiBhbnkpID0+IHtcbiAgICBzY29wZS5pbnRlcmFjdGFibGVzLmZvckVhY2hNYXRjaChub2RlLCAoaW50ZXJhY3RhYmxlOiBJbnRlcmFjdGFibGUpID0+IHtcbiAgICAgIGNvbnN0IGV2ZW50YWJsZSA9IGludGVyYWN0YWJsZS5ldmVudHNcbiAgICAgIGNvbnN0IG9wdGlvbnMgPSBldmVudGFibGUub3B0aW9uc1xuXG4gICAgICBpZiAoXG4gICAgICAgIGV2ZW50YWJsZS50eXBlc1t0eXBlXSAmJlxuICAgICAgICBldmVudGFibGUudHlwZXNbdHlwZV0ubGVuZ3RoICYmXG4gICAgICAgIGludGVyYWN0YWJsZS50ZXN0SWdub3JlQWxsb3cob3B0aW9ucywgbm9kZSwgZXZlbnRUYXJnZXQpKSB7XG4gICAgICAgIHRhcmdldHMucHVzaCh7XG4gICAgICAgICAgbm9kZSxcbiAgICAgICAgICBldmVudGFibGUsXG4gICAgICAgICAgcHJvcHM6IHsgaW50ZXJhY3RhYmxlIH0sXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfSlcbiAgfSlcblxuICBpbnRlcmFjdGFibGVzLnNpZ25hbHMub24oJ25ldycsICh7IGludGVyYWN0YWJsZSB9KSA9PiB7XG4gICAgaW50ZXJhY3RhYmxlLmV2ZW50cy5nZXRSZWN0ID0gZnVuY3Rpb24gKGVsZW1lbnQ6IEVsZW1lbnQpIHtcbiAgICAgIHJldHVybiBpbnRlcmFjdGFibGUuZ2V0UmVjdChlbGVtZW50KVxuICAgIH1cbiAgfSlcblxuICBpbnRlcmFjdGFibGVzLnNpZ25hbHMub24oJ3NldCcsICh7IGludGVyYWN0YWJsZSwgb3B0aW9ucyB9KSA9PiB7XG4gICAgZXh0ZW5kKGludGVyYWN0YWJsZS5ldmVudHMub3B0aW9ucywgcG9pbnRlckV2ZW50cy5kZWZhdWx0cylcbiAgICBleHRlbmQoaW50ZXJhY3RhYmxlLmV2ZW50cy5vcHRpb25zLCBvcHRpb25zLnBvaW50ZXJFdmVudHMgfHwge30pXG4gIH0pXG5cbiAgbWVyZ2UoYWN0aW9ucy5ldmVudFR5cGVzLCBwb2ludGVyRXZlbnRzLnR5cGVzKVxuXG4gIEludGVyYWN0YWJsZS5wcm90b3R5cGUucG9pbnRlckV2ZW50cyA9IHBvaW50ZXJFdmVudHNNZXRob2RcblxuICBjb25zdCBfX2JhY2tDb21wYXRPcHRpb24gPSBJbnRlcmFjdGFibGUucHJvdG90eXBlLl9iYWNrQ29tcGF0T3B0aW9uXG5cbiAgSW50ZXJhY3RhYmxlLnByb3RvdHlwZS5fYmFja0NvbXBhdE9wdGlvbiA9IGZ1bmN0aW9uIChvcHRpb25OYW1lLCBuZXdWYWx1ZSkge1xuICAgIGNvbnN0IHJldCA9IF9fYmFja0NvbXBhdE9wdGlvbi5jYWxsKHRoaXMsIG9wdGlvbk5hbWUsIG5ld1ZhbHVlKVxuXG4gICAgaWYgKHJldCA9PT0gdGhpcykge1xuICAgICAgdGhpcy5ldmVudHMub3B0aW9uc1tvcHRpb25OYW1lXSA9IG5ld1ZhbHVlXG4gICAgfVxuXG4gICAgcmV0dXJuIHJldFxuICB9XG59XG5cbmZ1bmN0aW9uIHBvaW50ZXJFdmVudHNNZXRob2QgKHRoaXM6IEludGVyYWN0YWJsZSwgb3B0aW9uczogYW55KSB7XG4gIGV4dGVuZCh0aGlzLmV2ZW50cy5vcHRpb25zLCBvcHRpb25zKVxuXG4gIHJldHVybiB0aGlzXG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgaWQ6ICdwb2ludGVyLWV2ZW50cy9pbnRlcmFjdGFibGVUYXJnZXRzJyxcbiAgaW5zdGFsbCxcbn1cbiJdfQ==