import test from '@interactjs/_dev/test/test';
import Eventable from '@interactjs/core/Eventable';
import interactions from '@interactjs/core/interactions';
import * as helpers from '@interactjs/core/tests/helpers';
import Signals from '@interactjs/utils/Signals';
import pointerEvents from '../base';
import holdRepeat from '../holdRepeat';
function mockScope() {
    return helpers.mockScope({
        pointerEvents: {
            defaults: {},
            signals: new Signals(),
            types: [],
            fire: () => { },
        },
    });
}
test('holdRepeat count', (t) => {
    const scope = mockScope();
    const pointerEvent = {
        type: 'hold',
        count: 0,
    };
    pointerEvents.install(scope);
    holdRepeat.install(scope);
    scope.pointerEvents.signals.fire('new', { pointerEvent });
    t.equal(pointerEvent.count, 1, 'first hold count is 1 with count previously undefined');
    const count = 20;
    pointerEvent.count = count;
    scope.pointerEvents.signals.fire('new', { pointerEvent });
    t.equal(pointerEvent.count, count + 1, 'existing hold count is incremented');
    t.end();
});
test('holdRepeat onFired', (t) => {
    const scope = mockScope();
    interactions.install(scope);
    pointerEvents.install(scope);
    holdRepeat.install(scope);
    const interaction = scope.interactions.new({});
    const pointerEvent = {
        type: 'hold',
    };
    const eventTarget = {};
    const eventable = new Eventable(Object.assign({}, scope.pointerEvents.defaults, {
        holdRepeatInterval: 0,
    }));
    const signalArg = {
        interaction,
        pointerEvent,
        eventTarget,
        targets: [{
                eventable,
            }],
    };
    scope.pointerEvents.signals.fire('fired', signalArg);
    t.notOk('holdIntervalHandle' in interaction, 'interaction interval handle was not saved with 0 holdRepeatInterval');
    eventable.options.holdRepeatInterval = 10;
    scope.pointerEvents.signals.fire('fired', signalArg);
    t.ok('holdIntervalHandle' in interaction, 'interaction interval handle was saved with interval > 0');
    clearInterval(interaction.holdIntervalHandle);
    pointerEvent.type = 'NOT_HOLD';
    delete interaction.holdIntervalHandle;
    scope.pointerEvents.signals.fire('fired', signalArg);
    t.notOk('holdIntervalHandle' in interaction, 'interaction interval handle is not saved if pointerEvent.type is not "hold"');
    t.end();
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaG9sZFJlcGVhdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImhvbGRSZXBlYXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxJQUFJLE1BQU0sNEJBQTRCLENBQUE7QUFDN0MsT0FBTyxTQUFTLE1BQU0sNEJBQTRCLENBQUE7QUFDbEQsT0FBTyxZQUFZLE1BQU0sK0JBQStCLENBQUE7QUFDeEQsT0FBTyxLQUFLLE9BQU8sTUFBTSxnQ0FBZ0MsQ0FBQTtBQUN6RCxPQUFPLE9BQU8sTUFBTSwyQkFBMkIsQ0FBQTtBQUMvQyxPQUFPLGFBQWEsTUFBTSxTQUFTLENBQUE7QUFDbkMsT0FBTyxVQUFVLE1BQU0sZUFBZSxDQUFBO0FBRXRDLFNBQVMsU0FBUztJQUNoQixPQUFPLE9BQU8sQ0FBQyxTQUFTLENBQUM7UUFDdkIsYUFBYSxFQUFFO1lBQ2IsUUFBUSxFQUFFLEVBQUU7WUFDWixPQUFPLEVBQUUsSUFBSSxPQUFPLEVBQUU7WUFDdEIsS0FBSyxFQUFFLEVBQUU7WUFDVCxJQUFJLEVBQUUsR0FBRyxFQUFFLEdBQUUsQ0FBQztTQUNmO0tBQ0YsQ0FBQyxDQUFBO0FBQ0osQ0FBQztBQUVELElBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFO0lBQzdCLE1BQU0sS0FBSyxHQUFHLFNBQVMsRUFBRSxDQUFBO0lBQ3pCLE1BQU0sWUFBWSxHQUFHO1FBQ25CLElBQUksRUFBRSxNQUFNO1FBQ1osS0FBSyxFQUFFLENBQUM7S0FDVCxDQUFBO0lBRUQsYUFBYSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQTtJQUM1QixVQUFVLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFBO0lBRXpCLEtBQUssQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsRUFBRSxZQUFZLEVBQUUsQ0FBQyxDQUFBO0lBQ3pELENBQUMsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRSxDQUFDLEVBQUUsdURBQXVELENBQUMsQ0FBQTtJQUV2RixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUE7SUFDaEIsWUFBWSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUE7SUFDMUIsS0FBSyxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxFQUFFLFlBQVksRUFBRSxDQUFDLENBQUE7SUFDekQsQ0FBQyxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsS0FBSyxFQUFFLEtBQUssR0FBRyxDQUFDLEVBQUUsb0NBQW9DLENBQUMsQ0FBQTtJQUU1RSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUE7QUFDVCxDQUFDLENBQUMsQ0FBQTtBQUVGLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFO0lBQy9CLE1BQU0sS0FBSyxHQUFHLFNBQVMsRUFBRSxDQUFBO0lBQ3pCLFlBQVksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUE7SUFDM0IsYUFBYSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQTtJQUM1QixVQUFVLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFBO0lBRXpCLE1BQU0sV0FBVyxHQUFHLEtBQUssQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFBO0lBQzlDLE1BQU0sWUFBWSxHQUFHO1FBQ25CLElBQUksRUFBRSxNQUFNO0tBQ2IsQ0FBQTtJQUNELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQTtJQUN0QixNQUFNLFNBQVMsR0FBRyxJQUFJLFNBQVMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxLQUFLLENBQUMsYUFBYSxDQUFDLFFBQVEsRUFBRTtRQUM5RSxrQkFBa0IsRUFBRSxDQUFDO0tBQ3RCLENBQUMsQ0FBQyxDQUFBO0lBQ0gsTUFBTSxTQUFTLEdBQUc7UUFDaEIsV0FBVztRQUNYLFlBQVk7UUFDWixXQUFXO1FBQ1gsT0FBTyxFQUFFLENBQUM7Z0JBQ1IsU0FBUzthQUNWLENBQUM7S0FDSCxDQUFBO0lBRUQsS0FBSyxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxTQUFTLENBQUMsQ0FBQTtJQUNwRCxDQUFDLENBQUMsS0FBSyxDQUFDLG9CQUFvQixJQUFJLFdBQVcsRUFDekMscUVBQXFFLENBQUMsQ0FBQTtJQUV4RSxTQUFTLENBQUMsT0FBTyxDQUFDLGtCQUFrQixHQUFHLEVBQUUsQ0FBQTtJQUN6QyxLQUFLLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLFNBQVMsQ0FBQyxDQUFBO0lBQ3BELENBQUMsQ0FBQyxFQUFFLENBQUMsb0JBQW9CLElBQUksV0FBVyxFQUN0Qyx5REFBeUQsQ0FBQyxDQUFBO0lBRTVELGFBQWEsQ0FBQyxXQUFXLENBQUMsa0JBQWtCLENBQUMsQ0FBQTtJQUU3QyxZQUFZLENBQUMsSUFBSSxHQUFHLFVBQVUsQ0FBQTtJQUM5QixPQUFPLFdBQVcsQ0FBQyxrQkFBa0IsQ0FBQTtJQUNyQyxLQUFLLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLFNBQVMsQ0FBQyxDQUFBO0lBQ3BELENBQUMsQ0FBQyxLQUFLLENBQUMsb0JBQW9CLElBQUksV0FBVyxFQUN6Qyw2RUFBNkUsQ0FBQyxDQUFBO0lBRWhGLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQTtBQUNULENBQUMsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHRlc3QgZnJvbSAnQGludGVyYWN0anMvX2Rldi90ZXN0L3Rlc3QnXG5pbXBvcnQgRXZlbnRhYmxlIGZyb20gJ0BpbnRlcmFjdGpzL2NvcmUvRXZlbnRhYmxlJ1xuaW1wb3J0IGludGVyYWN0aW9ucyBmcm9tICdAaW50ZXJhY3Rqcy9jb3JlL2ludGVyYWN0aW9ucydcbmltcG9ydCAqIGFzIGhlbHBlcnMgZnJvbSAnQGludGVyYWN0anMvY29yZS90ZXN0cy9oZWxwZXJzJ1xuaW1wb3J0IFNpZ25hbHMgZnJvbSAnQGludGVyYWN0anMvdXRpbHMvU2lnbmFscydcbmltcG9ydCBwb2ludGVyRXZlbnRzIGZyb20gJy4uL2Jhc2UnXG5pbXBvcnQgaG9sZFJlcGVhdCBmcm9tICcuLi9ob2xkUmVwZWF0J1xuXG5mdW5jdGlvbiBtb2NrU2NvcGUgKCkge1xuICByZXR1cm4gaGVscGVycy5tb2NrU2NvcGUoe1xuICAgIHBvaW50ZXJFdmVudHM6IHtcbiAgICAgIGRlZmF1bHRzOiB7fSxcbiAgICAgIHNpZ25hbHM6IG5ldyBTaWduYWxzKCksXG4gICAgICB0eXBlczogW10sXG4gICAgICBmaXJlOiAoKSA9PiB7fSxcbiAgICB9LFxuICB9KVxufVxuXG50ZXN0KCdob2xkUmVwZWF0IGNvdW50JywgKHQpID0+IHtcbiAgY29uc3Qgc2NvcGUgPSBtb2NrU2NvcGUoKVxuICBjb25zdCBwb2ludGVyRXZlbnQgPSB7XG4gICAgdHlwZTogJ2hvbGQnLFxuICAgIGNvdW50OiAwLFxuICB9XG5cbiAgcG9pbnRlckV2ZW50cy5pbnN0YWxsKHNjb3BlKVxuICBob2xkUmVwZWF0Lmluc3RhbGwoc2NvcGUpXG5cbiAgc2NvcGUucG9pbnRlckV2ZW50cy5zaWduYWxzLmZpcmUoJ25ldycsIHsgcG9pbnRlckV2ZW50IH0pXG4gIHQuZXF1YWwocG9pbnRlckV2ZW50LmNvdW50LCAxLCAnZmlyc3QgaG9sZCBjb3VudCBpcyAxIHdpdGggY291bnQgcHJldmlvdXNseSB1bmRlZmluZWQnKVxuXG4gIGNvbnN0IGNvdW50ID0gMjBcbiAgcG9pbnRlckV2ZW50LmNvdW50ID0gY291bnRcbiAgc2NvcGUucG9pbnRlckV2ZW50cy5zaWduYWxzLmZpcmUoJ25ldycsIHsgcG9pbnRlckV2ZW50IH0pXG4gIHQuZXF1YWwocG9pbnRlckV2ZW50LmNvdW50LCBjb3VudCArIDEsICdleGlzdGluZyBob2xkIGNvdW50IGlzIGluY3JlbWVudGVkJylcblxuICB0LmVuZCgpXG59KVxuXG50ZXN0KCdob2xkUmVwZWF0IG9uRmlyZWQnLCAodCkgPT4ge1xuICBjb25zdCBzY29wZSA9IG1vY2tTY29wZSgpXG4gIGludGVyYWN0aW9ucy5pbnN0YWxsKHNjb3BlKVxuICBwb2ludGVyRXZlbnRzLmluc3RhbGwoc2NvcGUpXG4gIGhvbGRSZXBlYXQuaW5zdGFsbChzY29wZSlcblxuICBjb25zdCBpbnRlcmFjdGlvbiA9IHNjb3BlLmludGVyYWN0aW9ucy5uZXcoe30pXG4gIGNvbnN0IHBvaW50ZXJFdmVudCA9IHtcbiAgICB0eXBlOiAnaG9sZCcsXG4gIH1cbiAgY29uc3QgZXZlbnRUYXJnZXQgPSB7fVxuICBjb25zdCBldmVudGFibGUgPSBuZXcgRXZlbnRhYmxlKE9iamVjdC5hc3NpZ24oe30sIHNjb3BlLnBvaW50ZXJFdmVudHMuZGVmYXVsdHMsIHtcbiAgICBob2xkUmVwZWF0SW50ZXJ2YWw6IDAsXG4gIH0pKVxuICBjb25zdCBzaWduYWxBcmcgPSB7XG4gICAgaW50ZXJhY3Rpb24sXG4gICAgcG9pbnRlckV2ZW50LFxuICAgIGV2ZW50VGFyZ2V0LFxuICAgIHRhcmdldHM6IFt7XG4gICAgICBldmVudGFibGUsXG4gICAgfV0sXG4gIH1cblxuICBzY29wZS5wb2ludGVyRXZlbnRzLnNpZ25hbHMuZmlyZSgnZmlyZWQnLCBzaWduYWxBcmcpXG4gIHQubm90T2soJ2hvbGRJbnRlcnZhbEhhbmRsZScgaW4gaW50ZXJhY3Rpb24sXG4gICAgJ2ludGVyYWN0aW9uIGludGVydmFsIGhhbmRsZSB3YXMgbm90IHNhdmVkIHdpdGggMCBob2xkUmVwZWF0SW50ZXJ2YWwnKVxuXG4gIGV2ZW50YWJsZS5vcHRpb25zLmhvbGRSZXBlYXRJbnRlcnZhbCA9IDEwXG4gIHNjb3BlLnBvaW50ZXJFdmVudHMuc2lnbmFscy5maXJlKCdmaXJlZCcsIHNpZ25hbEFyZylcbiAgdC5vaygnaG9sZEludGVydmFsSGFuZGxlJyBpbiBpbnRlcmFjdGlvbixcbiAgICAnaW50ZXJhY3Rpb24gaW50ZXJ2YWwgaGFuZGxlIHdhcyBzYXZlZCB3aXRoIGludGVydmFsID4gMCcpXG5cbiAgY2xlYXJJbnRlcnZhbChpbnRlcmFjdGlvbi5ob2xkSW50ZXJ2YWxIYW5kbGUpXG5cbiAgcG9pbnRlckV2ZW50LnR5cGUgPSAnTk9UX0hPTEQnXG4gIGRlbGV0ZSBpbnRlcmFjdGlvbi5ob2xkSW50ZXJ2YWxIYW5kbGVcbiAgc2NvcGUucG9pbnRlckV2ZW50cy5zaWduYWxzLmZpcmUoJ2ZpcmVkJywgc2lnbmFsQXJnKVxuICB0Lm5vdE9rKCdob2xkSW50ZXJ2YWxIYW5kbGUnIGluIGludGVyYWN0aW9uLFxuICAgICdpbnRlcmFjdGlvbiBpbnRlcnZhbCBoYW5kbGUgaXMgbm90IHNhdmVkIGlmIHBvaW50ZXJFdmVudC50eXBlIGlzIG5vdCBcImhvbGRcIicpXG5cbiAgdC5lbmQoKVxufSlcbiJdfQ==